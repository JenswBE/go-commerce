/*
GoCommerce

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the EventList type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EventList{}

// EventList struct for EventList
type EventList struct {
	Events []Event `json:"events"`
}

// NewEventList instantiates a new EventList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEventList(events []Event) *EventList {
	this := EventList{}
	this.Events = events
	return &this
}

// NewEventListWithDefaults instantiates a new EventList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEventListWithDefaults() *EventList {
	this := EventList{}
	return &this
}

// GetEvents returns the Events field value
func (o *EventList) GetEvents() []Event {
	if o == nil {
		var ret []Event
		return ret
	}

	return o.Events
}

// GetEventsOk returns a tuple with the Events field value
// and a boolean to check if the value has been set.
func (o *EventList) GetEventsOk() ([]Event, bool) {
	if o == nil {
		return nil, false
	}
	return o.Events, true
}

// SetEvents sets field value
func (o *EventList) SetEvents(v []Event) {
	o.Events = v
}

func (o EventList) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EventList) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["events"] = o.Events
	return toSerialize, nil
}

type NullableEventList struct {
	value *EventList
	isSet bool
}

func (v NullableEventList) Get() *EventList {
	return v.value
}

func (v *NullableEventList) Set(val *EventList) {
	v.value = val
	v.isSet = true
}

func (v NullableEventList) IsSet() bool {
	return v.isSet
}

func (v *NullableEventList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventList(val *EventList) *NullableEventList {
	return &NullableEventList{value: val, isSet: true}
}

func (v NullableEventList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


