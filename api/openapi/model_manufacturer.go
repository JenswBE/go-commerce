/*
GoCommerce

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Manufacturer type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Manufacturer{}

// Manufacturer struct for Manufacturer
type Manufacturer struct {
	// Compressed representation of ID
	Id string `json:"id"`
	Name string `json:"name"`
	WebsiteUrl *string `json:"website_url,omitempty"`
	ImageUrls *map[string]string `json:"image_urls,omitempty"`
}

type _Manufacturer Manufacturer

// NewManufacturer instantiates a new Manufacturer object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewManufacturer(id string, name string) *Manufacturer {
	this := Manufacturer{}
	this.Id = id
	this.Name = name
	return &this
}

// NewManufacturerWithDefaults instantiates a new Manufacturer object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewManufacturerWithDefaults() *Manufacturer {
	this := Manufacturer{}
	return &this
}

// GetId returns the Id field value
func (o *Manufacturer) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Manufacturer) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Manufacturer) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value
func (o *Manufacturer) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Manufacturer) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Manufacturer) SetName(v string) {
	o.Name = v
}

// GetWebsiteUrl returns the WebsiteUrl field value if set, zero value otherwise.
func (o *Manufacturer) GetWebsiteUrl() string {
	if o == nil || IsNil(o.WebsiteUrl) {
		var ret string
		return ret
	}
	return *o.WebsiteUrl
}

// GetWebsiteUrlOk returns a tuple with the WebsiteUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Manufacturer) GetWebsiteUrlOk() (*string, bool) {
	if o == nil || IsNil(o.WebsiteUrl) {
		return nil, false
	}
	return o.WebsiteUrl, true
}

// HasWebsiteUrl returns a boolean if a field has been set.
func (o *Manufacturer) HasWebsiteUrl() bool {
	if o != nil && !IsNil(o.WebsiteUrl) {
		return true
	}

	return false
}

// SetWebsiteUrl gets a reference to the given string and assigns it to the WebsiteUrl field.
func (o *Manufacturer) SetWebsiteUrl(v string) {
	o.WebsiteUrl = &v
}

// GetImageUrls returns the ImageUrls field value if set, zero value otherwise.
func (o *Manufacturer) GetImageUrls() map[string]string {
	if o == nil || IsNil(o.ImageUrls) {
		var ret map[string]string
		return ret
	}
	return *o.ImageUrls
}

// GetImageUrlsOk returns a tuple with the ImageUrls field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Manufacturer) GetImageUrlsOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.ImageUrls) {
		return nil, false
	}
	return o.ImageUrls, true
}

// HasImageUrls returns a boolean if a field has been set.
func (o *Manufacturer) HasImageUrls() bool {
	if o != nil && !IsNil(o.ImageUrls) {
		return true
	}

	return false
}

// SetImageUrls gets a reference to the given map[string]string and assigns it to the ImageUrls field.
func (o *Manufacturer) SetImageUrls(v map[string]string) {
	o.ImageUrls = &v
}

func (o Manufacturer) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Manufacturer) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["name"] = o.Name
	if !IsNil(o.WebsiteUrl) {
		toSerialize["website_url"] = o.WebsiteUrl
	}
	if !IsNil(o.ImageUrls) {
		toSerialize["image_urls"] = o.ImageUrls
	}
	return toSerialize, nil
}

func (o *Manufacturer) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varManufacturer := _Manufacturer{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varManufacturer)

	if err != nil {
		return err
	}

	*o = Manufacturer(varManufacturer)

	return err
}

type NullableManufacturer struct {
	value *Manufacturer
	isSet bool
}

func (v NullableManufacturer) Get() *Manufacturer {
	return v.value
}

func (v *NullableManufacturer) Set(val *Manufacturer) {
	v.value = val
	v.isSet = true
}

func (v NullableManufacturer) IsSet() bool {
	return v.isSet
}

func (v *NullableManufacturer) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableManufacturer(val *Manufacturer) *NullableManufacturer {
	return &NullableManufacturer{value: val, isSet: true}
}

func (v NullableManufacturer) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableManufacturer) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


