/*
GoCommerce

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the GocomError type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GocomError{}

// GocomError struct for GocomError
type GocomError struct {
	// HTTP status code
	Status *int32 `json:"status,omitempty"`
	Code GocomErrorCode `json:"code"`
	// Human-readable description of the error
	Message string `json:"message"`
	// Object to which this error is related
	Instance *string `json:"instance,omitempty"`
}

type _GocomError GocomError

// NewGocomError instantiates a new GocomError object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGocomError(code GocomErrorCode, message string) *GocomError {
	this := GocomError{}
	this.Code = code
	this.Message = message
	return &this
}

// NewGocomErrorWithDefaults instantiates a new GocomError object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGocomErrorWithDefaults() *GocomError {
	this := GocomError{}
	return &this
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *GocomError) GetStatus() int32 {
	if o == nil || IsNil(o.Status) {
		var ret int32
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GocomError) GetStatusOk() (*int32, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *GocomError) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given int32 and assigns it to the Status field.
func (o *GocomError) SetStatus(v int32) {
	o.Status = &v
}

// GetCode returns the Code field value
func (o *GocomError) GetCode() GocomErrorCode {
	if o == nil {
		var ret GocomErrorCode
		return ret
	}

	return o.Code
}

// GetCodeOk returns a tuple with the Code field value
// and a boolean to check if the value has been set.
func (o *GocomError) GetCodeOk() (*GocomErrorCode, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Code, true
}

// SetCode sets field value
func (o *GocomError) SetCode(v GocomErrorCode) {
	o.Code = v
}

// GetMessage returns the Message field value
func (o *GocomError) GetMessage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Message
}

// GetMessageOk returns a tuple with the Message field value
// and a boolean to check if the value has been set.
func (o *GocomError) GetMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Message, true
}

// SetMessage sets field value
func (o *GocomError) SetMessage(v string) {
	o.Message = v
}

// GetInstance returns the Instance field value if set, zero value otherwise.
func (o *GocomError) GetInstance() string {
	if o == nil || IsNil(o.Instance) {
		var ret string
		return ret
	}
	return *o.Instance
}

// GetInstanceOk returns a tuple with the Instance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GocomError) GetInstanceOk() (*string, bool) {
	if o == nil || IsNil(o.Instance) {
		return nil, false
	}
	return o.Instance, true
}

// HasInstance returns a boolean if a field has been set.
func (o *GocomError) HasInstance() bool {
	if o != nil && !IsNil(o.Instance) {
		return true
	}

	return false
}

// SetInstance gets a reference to the given string and assigns it to the Instance field.
func (o *GocomError) SetInstance(v string) {
	o.Instance = &v
}

func (o GocomError) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GocomError) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	toSerialize["code"] = o.Code
	toSerialize["message"] = o.Message
	if !IsNil(o.Instance) {
		toSerialize["instance"] = o.Instance
	}
	return toSerialize, nil
}

func (o *GocomError) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"code",
		"message",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGocomError := _GocomError{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varGocomError)

	if err != nil {
		return err
	}

	*o = GocomError(varGocomError)

	return err
}

type NullableGocomError struct {
	value *GocomError
	isSet bool
}

func (v NullableGocomError) Get() *GocomError {
	return v.value
}

func (v *NullableGocomError) Set(val *GocomError) {
	v.value = val
	v.isSet = true
}

func (v NullableGocomError) IsSet() bool {
	return v.isSet
}

func (v *NullableGocomError) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGocomError(val *GocomError) *NullableGocomError {
	return &NullableGocomError{value: val, isSet: true}
}

func (v NullableGocomError) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGocomError) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


