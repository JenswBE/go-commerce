/*
GoCommerce

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// checks if the ContentList type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ContentList{}

// ContentList struct for ContentList
type ContentList struct {
	Content []Content `json:"content"`
}

type _ContentList ContentList

// NewContentList instantiates a new ContentList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewContentList(content []Content) *ContentList {
	this := ContentList{}
	this.Content = content
	return &this
}

// NewContentListWithDefaults instantiates a new ContentList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewContentListWithDefaults() *ContentList {
	this := ContentList{}
	return &this
}

// GetContent returns the Content field value
func (o *ContentList) GetContent() []Content {
	if o == nil {
		var ret []Content
		return ret
	}

	return o.Content
}

// GetContentOk returns a tuple with the Content field value
// and a boolean to check if the value has been set.
func (o *ContentList) GetContentOk() ([]Content, bool) {
	if o == nil {
		return nil, false
	}
	return o.Content, true
}

// SetContent sets field value
func (o *ContentList) SetContent(v []Content) {
	o.Content = v
}

func (o ContentList) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ContentList) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["content"] = o.Content
	return toSerialize, nil
}

func (o *ContentList) UnmarshalJSON(bytes []byte) (err error) {
    // This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"content",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varContentList := _ContentList{}

	err = json.Unmarshal(bytes, &varContentList)

	if err != nil {
		return err
	}

	*o = ContentList(varContentList)

	return err
}

type NullableContentList struct {
	value *ContentList
	isSet bool
}

func (v NullableContentList) Get() *ContentList {
	return v.value
}

func (v *NullableContentList) Set(val *ContentList) {
	v.value = val
	v.isSet = true
}

func (v NullableContentList) IsSet() bool {
	return v.isSet
}

func (v *NullableContentList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContentList(val *ContentList) *NullableContentList {
	return &NullableContentList{value: val, isSet: true}
}

func (v NullableContentList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContentList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


