/*
GoCommerce

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the Product type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Product{}

// Product struct for Product
type Product struct {
	// Compressed representation of ID
	Id string `json:"id"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
	Name string `json:"name"`
	DescriptionShort *string `json:"description_short,omitempty"`
	DescriptionLong *string `json:"description_long,omitempty"`
	// Price in cents
	Price int64 `json:"price"`
	CategoryIds []string `json:"category_ids,omitempty"`
	// Compressed representation of ID
	ManufacturerId *string `json:"manufacturer_id,omitempty"`
	Status *ProductStatus `json:"status,omitempty"`
	StockCount *int64 `json:"stock_count,omitempty"`
	ImageUrls []map[string]string `json:"image_urls,omitempty"`
}

type _Product Product

// NewProduct instantiates a new Product object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProduct(id string, createdAt time.Time, updatedAt time.Time, name string, price int64) *Product {
	this := Product{}
	this.Id = id
	this.CreatedAt = createdAt
	this.UpdatedAt = updatedAt
	this.Name = name
	this.Price = price
	return &this
}

// NewProductWithDefaults instantiates a new Product object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProductWithDefaults() *Product {
	this := Product{}
	return &this
}

// GetId returns the Id field value
func (o *Product) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Product) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Product) SetId(v string) {
	o.Id = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *Product) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *Product) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *Product) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetUpdatedAt returns the UpdatedAt field value
func (o *Product) GetUpdatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
func (o *Product) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedAt, true
}

// SetUpdatedAt sets field value
func (o *Product) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = v
}

// GetName returns the Name field value
func (o *Product) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Product) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Product) SetName(v string) {
	o.Name = v
}

// GetDescriptionShort returns the DescriptionShort field value if set, zero value otherwise.
func (o *Product) GetDescriptionShort() string {
	if o == nil || IsNil(o.DescriptionShort) {
		var ret string
		return ret
	}
	return *o.DescriptionShort
}

// GetDescriptionShortOk returns a tuple with the DescriptionShort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Product) GetDescriptionShortOk() (*string, bool) {
	if o == nil || IsNil(o.DescriptionShort) {
		return nil, false
	}
	return o.DescriptionShort, true
}

// HasDescriptionShort returns a boolean if a field has been set.
func (o *Product) HasDescriptionShort() bool {
	if o != nil && !IsNil(o.DescriptionShort) {
		return true
	}

	return false
}

// SetDescriptionShort gets a reference to the given string and assigns it to the DescriptionShort field.
func (o *Product) SetDescriptionShort(v string) {
	o.DescriptionShort = &v
}

// GetDescriptionLong returns the DescriptionLong field value if set, zero value otherwise.
func (o *Product) GetDescriptionLong() string {
	if o == nil || IsNil(o.DescriptionLong) {
		var ret string
		return ret
	}
	return *o.DescriptionLong
}

// GetDescriptionLongOk returns a tuple with the DescriptionLong field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Product) GetDescriptionLongOk() (*string, bool) {
	if o == nil || IsNil(o.DescriptionLong) {
		return nil, false
	}
	return o.DescriptionLong, true
}

// HasDescriptionLong returns a boolean if a field has been set.
func (o *Product) HasDescriptionLong() bool {
	if o != nil && !IsNil(o.DescriptionLong) {
		return true
	}

	return false
}

// SetDescriptionLong gets a reference to the given string and assigns it to the DescriptionLong field.
func (o *Product) SetDescriptionLong(v string) {
	o.DescriptionLong = &v
}

// GetPrice returns the Price field value
func (o *Product) GetPrice() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Price
}

// GetPriceOk returns a tuple with the Price field value
// and a boolean to check if the value has been set.
func (o *Product) GetPriceOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Price, true
}

// SetPrice sets field value
func (o *Product) SetPrice(v int64) {
	o.Price = v
}

// GetCategoryIds returns the CategoryIds field value if set, zero value otherwise.
func (o *Product) GetCategoryIds() []string {
	if o == nil || IsNil(o.CategoryIds) {
		var ret []string
		return ret
	}
	return o.CategoryIds
}

// GetCategoryIdsOk returns a tuple with the CategoryIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Product) GetCategoryIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.CategoryIds) {
		return nil, false
	}
	return o.CategoryIds, true
}

// HasCategoryIds returns a boolean if a field has been set.
func (o *Product) HasCategoryIds() bool {
	if o != nil && !IsNil(o.CategoryIds) {
		return true
	}

	return false
}

// SetCategoryIds gets a reference to the given []string and assigns it to the CategoryIds field.
func (o *Product) SetCategoryIds(v []string) {
	o.CategoryIds = v
}

// GetManufacturerId returns the ManufacturerId field value if set, zero value otherwise.
func (o *Product) GetManufacturerId() string {
	if o == nil || IsNil(o.ManufacturerId) {
		var ret string
		return ret
	}
	return *o.ManufacturerId
}

// GetManufacturerIdOk returns a tuple with the ManufacturerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Product) GetManufacturerIdOk() (*string, bool) {
	if o == nil || IsNil(o.ManufacturerId) {
		return nil, false
	}
	return o.ManufacturerId, true
}

// HasManufacturerId returns a boolean if a field has been set.
func (o *Product) HasManufacturerId() bool {
	if o != nil && !IsNil(o.ManufacturerId) {
		return true
	}

	return false
}

// SetManufacturerId gets a reference to the given string and assigns it to the ManufacturerId field.
func (o *Product) SetManufacturerId(v string) {
	o.ManufacturerId = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *Product) GetStatus() ProductStatus {
	if o == nil || IsNil(o.Status) {
		var ret ProductStatus
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Product) GetStatusOk() (*ProductStatus, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *Product) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given ProductStatus and assigns it to the Status field.
func (o *Product) SetStatus(v ProductStatus) {
	o.Status = &v
}

// GetStockCount returns the StockCount field value if set, zero value otherwise.
func (o *Product) GetStockCount() int64 {
	if o == nil || IsNil(o.StockCount) {
		var ret int64
		return ret
	}
	return *o.StockCount
}

// GetStockCountOk returns a tuple with the StockCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Product) GetStockCountOk() (*int64, bool) {
	if o == nil || IsNil(o.StockCount) {
		return nil, false
	}
	return o.StockCount, true
}

// HasStockCount returns a boolean if a field has been set.
func (o *Product) HasStockCount() bool {
	if o != nil && !IsNil(o.StockCount) {
		return true
	}

	return false
}

// SetStockCount gets a reference to the given int64 and assigns it to the StockCount field.
func (o *Product) SetStockCount(v int64) {
	o.StockCount = &v
}

// GetImageUrls returns the ImageUrls field value if set, zero value otherwise.
func (o *Product) GetImageUrls() []map[string]string {
	if o == nil || IsNil(o.ImageUrls) {
		var ret []map[string]string
		return ret
	}
	return o.ImageUrls
}

// GetImageUrlsOk returns a tuple with the ImageUrls field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Product) GetImageUrlsOk() ([]map[string]string, bool) {
	if o == nil || IsNil(o.ImageUrls) {
		return nil, false
	}
	return o.ImageUrls, true
}

// HasImageUrls returns a boolean if a field has been set.
func (o *Product) HasImageUrls() bool {
	if o != nil && !IsNil(o.ImageUrls) {
		return true
	}

	return false
}

// SetImageUrls gets a reference to the given []map[string]string and assigns it to the ImageUrls field.
func (o *Product) SetImageUrls(v []map[string]string) {
	o.ImageUrls = v
}

func (o Product) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Product) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["created_at"] = o.CreatedAt
	toSerialize["updated_at"] = o.UpdatedAt
	toSerialize["name"] = o.Name
	if !IsNil(o.DescriptionShort) {
		toSerialize["description_short"] = o.DescriptionShort
	}
	if !IsNil(o.DescriptionLong) {
		toSerialize["description_long"] = o.DescriptionLong
	}
	toSerialize["price"] = o.Price
	if !IsNil(o.CategoryIds) {
		toSerialize["category_ids"] = o.CategoryIds
	}
	if !IsNil(o.ManufacturerId) {
		toSerialize["manufacturer_id"] = o.ManufacturerId
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.StockCount) {
		toSerialize["stock_count"] = o.StockCount
	}
	if !IsNil(o.ImageUrls) {
		toSerialize["image_urls"] = o.ImageUrls
	}
	return toSerialize, nil
}

func (o *Product) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"created_at",
		"updated_at",
		"name",
		"price",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varProduct := _Product{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varProduct)

	if err != nil {
		return err
	}

	*o = Product(varProduct)

	return err
}

type NullableProduct struct {
	value *Product
	isSet bool
}

func (v NullableProduct) Get() *Product {
	return v.value
}

func (v *NullableProduct) Set(val *Product) {
	v.value = val
	v.isSet = true
}

func (v NullableProduct) IsSet() bool {
	return v.isSet
}

func (v *NullableProduct) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProduct(val *Product) *NullableProduct {
	return &NullableProduct{value: val, isSet: true}
}

func (v NullableProduct) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProduct) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


