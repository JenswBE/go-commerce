/*
GoCommerce

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the ResolvedProduct type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ResolvedProduct{}

// ResolvedProduct struct for ResolvedProduct
type ResolvedProduct struct {
	// Compressed representation of ID
	Id string `json:"id"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
	Name string `json:"name"`
	DescriptionShort *string `json:"description_short,omitempty"`
	DescriptionLong *string `json:"description_long,omitempty"`
	// Price in cents
	Price int64 `json:"price"`
	CategoryIds []string `json:"category_ids,omitempty"`
	// Compressed representation of ID
	ManufacturerId *string `json:"manufacturer_id,omitempty"`
	Status *ProductStatus `json:"status,omitempty"`
	StockCount *int64 `json:"stock_count,omitempty"`
	ImageUrls []map[string]string `json:"image_urls,omitempty"`
	Manufacturer *Manufacturer `json:"manufacturer,omitempty"`
	Categories []Category `json:"categories,omitempty"`
}

// NewResolvedProduct instantiates a new ResolvedProduct object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResolvedProduct(id string, createdAt time.Time, updatedAt time.Time, name string, price int64) *ResolvedProduct {
	this := ResolvedProduct{}
	this.Id = id
	this.CreatedAt = createdAt
	this.UpdatedAt = updatedAt
	this.Name = name
	this.Price = price
	return &this
}

// NewResolvedProductWithDefaults instantiates a new ResolvedProduct object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResolvedProductWithDefaults() *ResolvedProduct {
	this := ResolvedProduct{}
	return &this
}

// GetId returns the Id field value
func (o *ResolvedProduct) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ResolvedProduct) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ResolvedProduct) SetId(v string) {
	o.Id = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *ResolvedProduct) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *ResolvedProduct) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *ResolvedProduct) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetUpdatedAt returns the UpdatedAt field value
func (o *ResolvedProduct) GetUpdatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
func (o *ResolvedProduct) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedAt, true
}

// SetUpdatedAt sets field value
func (o *ResolvedProduct) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = v
}

// GetName returns the Name field value
func (o *ResolvedProduct) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ResolvedProduct) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ResolvedProduct) SetName(v string) {
	o.Name = v
}

// GetDescriptionShort returns the DescriptionShort field value if set, zero value otherwise.
func (o *ResolvedProduct) GetDescriptionShort() string {
	if o == nil || IsNil(o.DescriptionShort) {
		var ret string
		return ret
	}
	return *o.DescriptionShort
}

// GetDescriptionShortOk returns a tuple with the DescriptionShort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResolvedProduct) GetDescriptionShortOk() (*string, bool) {
	if o == nil || IsNil(o.DescriptionShort) {
		return nil, false
	}
	return o.DescriptionShort, true
}

// HasDescriptionShort returns a boolean if a field has been set.
func (o *ResolvedProduct) HasDescriptionShort() bool {
	if o != nil && !IsNil(o.DescriptionShort) {
		return true
	}

	return false
}

// SetDescriptionShort gets a reference to the given string and assigns it to the DescriptionShort field.
func (o *ResolvedProduct) SetDescriptionShort(v string) {
	o.DescriptionShort = &v
}

// GetDescriptionLong returns the DescriptionLong field value if set, zero value otherwise.
func (o *ResolvedProduct) GetDescriptionLong() string {
	if o == nil || IsNil(o.DescriptionLong) {
		var ret string
		return ret
	}
	return *o.DescriptionLong
}

// GetDescriptionLongOk returns a tuple with the DescriptionLong field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResolvedProduct) GetDescriptionLongOk() (*string, bool) {
	if o == nil || IsNil(o.DescriptionLong) {
		return nil, false
	}
	return o.DescriptionLong, true
}

// HasDescriptionLong returns a boolean if a field has been set.
func (o *ResolvedProduct) HasDescriptionLong() bool {
	if o != nil && !IsNil(o.DescriptionLong) {
		return true
	}

	return false
}

// SetDescriptionLong gets a reference to the given string and assigns it to the DescriptionLong field.
func (o *ResolvedProduct) SetDescriptionLong(v string) {
	o.DescriptionLong = &v
}

// GetPrice returns the Price field value
func (o *ResolvedProduct) GetPrice() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Price
}

// GetPriceOk returns a tuple with the Price field value
// and a boolean to check if the value has been set.
func (o *ResolvedProduct) GetPriceOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Price, true
}

// SetPrice sets field value
func (o *ResolvedProduct) SetPrice(v int64) {
	o.Price = v
}

// GetCategoryIds returns the CategoryIds field value if set, zero value otherwise.
func (o *ResolvedProduct) GetCategoryIds() []string {
	if o == nil || IsNil(o.CategoryIds) {
		var ret []string
		return ret
	}
	return o.CategoryIds
}

// GetCategoryIdsOk returns a tuple with the CategoryIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResolvedProduct) GetCategoryIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.CategoryIds) {
		return nil, false
	}
	return o.CategoryIds, true
}

// HasCategoryIds returns a boolean if a field has been set.
func (o *ResolvedProduct) HasCategoryIds() bool {
	if o != nil && !IsNil(o.CategoryIds) {
		return true
	}

	return false
}

// SetCategoryIds gets a reference to the given []string and assigns it to the CategoryIds field.
func (o *ResolvedProduct) SetCategoryIds(v []string) {
	o.CategoryIds = v
}

// GetManufacturerId returns the ManufacturerId field value if set, zero value otherwise.
func (o *ResolvedProduct) GetManufacturerId() string {
	if o == nil || IsNil(o.ManufacturerId) {
		var ret string
		return ret
	}
	return *o.ManufacturerId
}

// GetManufacturerIdOk returns a tuple with the ManufacturerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResolvedProduct) GetManufacturerIdOk() (*string, bool) {
	if o == nil || IsNil(o.ManufacturerId) {
		return nil, false
	}
	return o.ManufacturerId, true
}

// HasManufacturerId returns a boolean if a field has been set.
func (o *ResolvedProduct) HasManufacturerId() bool {
	if o != nil && !IsNil(o.ManufacturerId) {
		return true
	}

	return false
}

// SetManufacturerId gets a reference to the given string and assigns it to the ManufacturerId field.
func (o *ResolvedProduct) SetManufacturerId(v string) {
	o.ManufacturerId = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *ResolvedProduct) GetStatus() ProductStatus {
	if o == nil || IsNil(o.Status) {
		var ret ProductStatus
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResolvedProduct) GetStatusOk() (*ProductStatus, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *ResolvedProduct) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given ProductStatus and assigns it to the Status field.
func (o *ResolvedProduct) SetStatus(v ProductStatus) {
	o.Status = &v
}

// GetStockCount returns the StockCount field value if set, zero value otherwise.
func (o *ResolvedProduct) GetStockCount() int64 {
	if o == nil || IsNil(o.StockCount) {
		var ret int64
		return ret
	}
	return *o.StockCount
}

// GetStockCountOk returns a tuple with the StockCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResolvedProduct) GetStockCountOk() (*int64, bool) {
	if o == nil || IsNil(o.StockCount) {
		return nil, false
	}
	return o.StockCount, true
}

// HasStockCount returns a boolean if a field has been set.
func (o *ResolvedProduct) HasStockCount() bool {
	if o != nil && !IsNil(o.StockCount) {
		return true
	}

	return false
}

// SetStockCount gets a reference to the given int64 and assigns it to the StockCount field.
func (o *ResolvedProduct) SetStockCount(v int64) {
	o.StockCount = &v
}

// GetImageUrls returns the ImageUrls field value if set, zero value otherwise.
func (o *ResolvedProduct) GetImageUrls() []map[string]string {
	if o == nil || IsNil(o.ImageUrls) {
		var ret []map[string]string
		return ret
	}
	return o.ImageUrls
}

// GetImageUrlsOk returns a tuple with the ImageUrls field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResolvedProduct) GetImageUrlsOk() ([]map[string]string, bool) {
	if o == nil || IsNil(o.ImageUrls) {
		return nil, false
	}
	return o.ImageUrls, true
}

// HasImageUrls returns a boolean if a field has been set.
func (o *ResolvedProduct) HasImageUrls() bool {
	if o != nil && !IsNil(o.ImageUrls) {
		return true
	}

	return false
}

// SetImageUrls gets a reference to the given []map[string]string and assigns it to the ImageUrls field.
func (o *ResolvedProduct) SetImageUrls(v []map[string]string) {
	o.ImageUrls = v
}

// GetManufacturer returns the Manufacturer field value if set, zero value otherwise.
func (o *ResolvedProduct) GetManufacturer() Manufacturer {
	if o == nil || IsNil(o.Manufacturer) {
		var ret Manufacturer
		return ret
	}
	return *o.Manufacturer
}

// GetManufacturerOk returns a tuple with the Manufacturer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResolvedProduct) GetManufacturerOk() (*Manufacturer, bool) {
	if o == nil || IsNil(o.Manufacturer) {
		return nil, false
	}
	return o.Manufacturer, true
}

// HasManufacturer returns a boolean if a field has been set.
func (o *ResolvedProduct) HasManufacturer() bool {
	if o != nil && !IsNil(o.Manufacturer) {
		return true
	}

	return false
}

// SetManufacturer gets a reference to the given Manufacturer and assigns it to the Manufacturer field.
func (o *ResolvedProduct) SetManufacturer(v Manufacturer) {
	o.Manufacturer = &v
}

// GetCategories returns the Categories field value if set, zero value otherwise.
func (o *ResolvedProduct) GetCategories() []Category {
	if o == nil || IsNil(o.Categories) {
		var ret []Category
		return ret
	}
	return o.Categories
}

// GetCategoriesOk returns a tuple with the Categories field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResolvedProduct) GetCategoriesOk() ([]Category, bool) {
	if o == nil || IsNil(o.Categories) {
		return nil, false
	}
	return o.Categories, true
}

// HasCategories returns a boolean if a field has been set.
func (o *ResolvedProduct) HasCategories() bool {
	if o != nil && !IsNil(o.Categories) {
		return true
	}

	return false
}

// SetCategories gets a reference to the given []Category and assigns it to the Categories field.
func (o *ResolvedProduct) SetCategories(v []Category) {
	o.Categories = v
}

func (o ResolvedProduct) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ResolvedProduct) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["created_at"] = o.CreatedAt
	toSerialize["updated_at"] = o.UpdatedAt
	toSerialize["name"] = o.Name
	if !IsNil(o.DescriptionShort) {
		toSerialize["description_short"] = o.DescriptionShort
	}
	if !IsNil(o.DescriptionLong) {
		toSerialize["description_long"] = o.DescriptionLong
	}
	toSerialize["price"] = o.Price
	if !IsNil(o.CategoryIds) {
		toSerialize["category_ids"] = o.CategoryIds
	}
	if !IsNil(o.ManufacturerId) {
		toSerialize["manufacturer_id"] = o.ManufacturerId
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.StockCount) {
		toSerialize["stock_count"] = o.StockCount
	}
	if !IsNil(o.ImageUrls) {
		toSerialize["image_urls"] = o.ImageUrls
	}
	if !IsNil(o.Manufacturer) {
		toSerialize["manufacturer"] = o.Manufacturer
	}
	if !IsNil(o.Categories) {
		toSerialize["categories"] = o.Categories
	}
	return toSerialize, nil
}

type NullableResolvedProduct struct {
	value *ResolvedProduct
	isSet bool
}

func (v NullableResolvedProduct) Get() *ResolvedProduct {
	return v.value
}

func (v *NullableResolvedProduct) Set(val *ResolvedProduct) {
	v.value = val
	v.isSet = true
}

func (v NullableResolvedProduct) IsSet() bool {
	return v.isSet
}

func (v *NullableResolvedProduct) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResolvedProduct(val *ResolvedProduct) *NullableResolvedProduct {
	return &NullableResolvedProduct{value: val, isSet: true}
}

func (v NullableResolvedProduct) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResolvedProduct) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


