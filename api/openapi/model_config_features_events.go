/*
GoCommerce

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ConfigFeaturesEvents struct for ConfigFeaturesEvents
type ConfigFeaturesEvents struct {
	Enabled bool `json:"enabled"`
	WholeDaysOnly bool `json:"whole_days_only"`
}

// NewConfigFeaturesEvents instantiates a new ConfigFeaturesEvents object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConfigFeaturesEvents(enabled bool, wholeDaysOnly bool) *ConfigFeaturesEvents {
	this := ConfigFeaturesEvents{}
	this.Enabled = enabled
	this.WholeDaysOnly = wholeDaysOnly
	return &this
}

// NewConfigFeaturesEventsWithDefaults instantiates a new ConfigFeaturesEvents object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConfigFeaturesEventsWithDefaults() *ConfigFeaturesEvents {
	this := ConfigFeaturesEvents{}
	return &this
}

// GetEnabled returns the Enabled field value
func (o *ConfigFeaturesEvents) GetEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value
// and a boolean to check if the value has been set.
func (o *ConfigFeaturesEvents) GetEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Enabled, true
}

// SetEnabled sets field value
func (o *ConfigFeaturesEvents) SetEnabled(v bool) {
	o.Enabled = v
}

// GetWholeDaysOnly returns the WholeDaysOnly field value
func (o *ConfigFeaturesEvents) GetWholeDaysOnly() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.WholeDaysOnly
}

// GetWholeDaysOnlyOk returns a tuple with the WholeDaysOnly field value
// and a boolean to check if the value has been set.
func (o *ConfigFeaturesEvents) GetWholeDaysOnlyOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.WholeDaysOnly, true
}

// SetWholeDaysOnly sets field value
func (o *ConfigFeaturesEvents) SetWholeDaysOnly(v bool) {
	o.WholeDaysOnly = v
}

func (o ConfigFeaturesEvents) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["enabled"] = o.Enabled
	}
	if true {
		toSerialize["whole_days_only"] = o.WholeDaysOnly
	}
	return json.Marshal(toSerialize)
}

type NullableConfigFeaturesEvents struct {
	value *ConfigFeaturesEvents
	isSet bool
}

func (v NullableConfigFeaturesEvents) Get() *ConfigFeaturesEvents {
	return v.value
}

func (v *NullableConfigFeaturesEvents) Set(val *ConfigFeaturesEvents) {
	v.value = val
	v.isSet = true
}

func (v NullableConfigFeaturesEvents) IsSet() bool {
	return v.isSet
}

func (v *NullableConfigFeaturesEvents) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConfigFeaturesEvents(val *ConfigFeaturesEvents) *NullableConfigFeaturesEvents {
	return &NullableConfigFeaturesEvents{value: val, isSet: true}
}

func (v NullableConfigFeaturesEvents) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConfigFeaturesEvents) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


