/*
 * GoCommerce
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// TimestampedHeaderAllOf struct for TimestampedHeaderAllOf
type TimestampedHeaderAllOf struct {
	CreatedAt *time.Time `json:"created_at,omitempty"`
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

// NewTimestampedHeaderAllOf instantiates a new TimestampedHeaderAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTimestampedHeaderAllOf() *TimestampedHeaderAllOf {
	this := TimestampedHeaderAllOf{}
	return &this
}

// NewTimestampedHeaderAllOfWithDefaults instantiates a new TimestampedHeaderAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTimestampedHeaderAllOfWithDefaults() *TimestampedHeaderAllOf {
	this := TimestampedHeaderAllOf{}
	return &this
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *TimestampedHeaderAllOf) GetCreatedAt() time.Time {
	if o == nil || o.CreatedAt == nil {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimestampedHeaderAllOf) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || o.CreatedAt == nil {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *TimestampedHeaderAllOf) HasCreatedAt() bool {
	if o != nil && o.CreatedAt != nil {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *TimestampedHeaderAllOf) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *TimestampedHeaderAllOf) GetUpdatedAt() time.Time {
	if o == nil || o.UpdatedAt == nil {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimestampedHeaderAllOf) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || o.UpdatedAt == nil {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *TimestampedHeaderAllOf) HasUpdatedAt() bool {
	if o != nil && o.UpdatedAt != nil {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *TimestampedHeaderAllOf) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

func (o TimestampedHeaderAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.CreatedAt != nil {
		toSerialize["created_at"] = o.CreatedAt
	}
	if o.UpdatedAt != nil {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	return json.Marshal(toSerialize)
}

type NullableTimestampedHeaderAllOf struct {
	value *TimestampedHeaderAllOf
	isSet bool
}

func (v NullableTimestampedHeaderAllOf) Get() *TimestampedHeaderAllOf {
	return v.value
}

func (v *NullableTimestampedHeaderAllOf) Set(val *TimestampedHeaderAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableTimestampedHeaderAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableTimestampedHeaderAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTimestampedHeaderAllOf(val *TimestampedHeaderAllOf) *NullableTimestampedHeaderAllOf {
	return &NullableTimestampedHeaderAllOf{value: val, isSet: true}
}

func (v NullableTimestampedHeaderAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTimestampedHeaderAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
