/*
GoCommerce

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ProductAllOf struct for ProductAllOf
type ProductAllOf struct {
	Name string `json:"name"`
	DescriptionShort *string `json:"description_short,omitempty"`
	DescriptionLong *string `json:"description_long,omitempty"`
	// Price in cents
	Price int64 `json:"price"`
	CategoryIds []string `json:"category_ids,omitempty"`
	ManufacturerId *string `json:"manufacturer_id,omitempty"`
	Status *ProductStatus `json:"status,omitempty"`
	StockCount *int64 `json:"stock_count,omitempty"`
	ImageUrls []map[string]string `json:"image_urls,omitempty"`
}

// NewProductAllOf instantiates a new ProductAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProductAllOf(name string, price int64) *ProductAllOf {
	this := ProductAllOf{}
	this.Name = name
	this.Price = price
	return &this
}

// NewProductAllOfWithDefaults instantiates a new ProductAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProductAllOfWithDefaults() *ProductAllOf {
	this := ProductAllOf{}
	return &this
}

// GetName returns the Name field value
func (o *ProductAllOf) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ProductAllOf) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ProductAllOf) SetName(v string) {
	o.Name = v
}

// GetDescriptionShort returns the DescriptionShort field value if set, zero value otherwise.
func (o *ProductAllOf) GetDescriptionShort() string {
	if o == nil || o.DescriptionShort == nil {
		var ret string
		return ret
	}
	return *o.DescriptionShort
}

// GetDescriptionShortOk returns a tuple with the DescriptionShort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductAllOf) GetDescriptionShortOk() (*string, bool) {
	if o == nil || o.DescriptionShort == nil {
		return nil, false
	}
	return o.DescriptionShort, true
}

// HasDescriptionShort returns a boolean if a field has been set.
func (o *ProductAllOf) HasDescriptionShort() bool {
	if o != nil && o.DescriptionShort != nil {
		return true
	}

	return false
}

// SetDescriptionShort gets a reference to the given string and assigns it to the DescriptionShort field.
func (o *ProductAllOf) SetDescriptionShort(v string) {
	o.DescriptionShort = &v
}

// GetDescriptionLong returns the DescriptionLong field value if set, zero value otherwise.
func (o *ProductAllOf) GetDescriptionLong() string {
	if o == nil || o.DescriptionLong == nil {
		var ret string
		return ret
	}
	return *o.DescriptionLong
}

// GetDescriptionLongOk returns a tuple with the DescriptionLong field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductAllOf) GetDescriptionLongOk() (*string, bool) {
	if o == nil || o.DescriptionLong == nil {
		return nil, false
	}
	return o.DescriptionLong, true
}

// HasDescriptionLong returns a boolean if a field has been set.
func (o *ProductAllOf) HasDescriptionLong() bool {
	if o != nil && o.DescriptionLong != nil {
		return true
	}

	return false
}

// SetDescriptionLong gets a reference to the given string and assigns it to the DescriptionLong field.
func (o *ProductAllOf) SetDescriptionLong(v string) {
	o.DescriptionLong = &v
}

// GetPrice returns the Price field value
func (o *ProductAllOf) GetPrice() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Price
}

// GetPriceOk returns a tuple with the Price field value
// and a boolean to check if the value has been set.
func (o *ProductAllOf) GetPriceOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Price, true
}

// SetPrice sets field value
func (o *ProductAllOf) SetPrice(v int64) {
	o.Price = v
}

// GetCategoryIds returns the CategoryIds field value if set, zero value otherwise.
func (o *ProductAllOf) GetCategoryIds() []string {
	if o == nil || o.CategoryIds == nil {
		var ret []string
		return ret
	}
	return o.CategoryIds
}

// GetCategoryIdsOk returns a tuple with the CategoryIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductAllOf) GetCategoryIdsOk() ([]string, bool) {
	if o == nil || o.CategoryIds == nil {
		return nil, false
	}
	return o.CategoryIds, true
}

// HasCategoryIds returns a boolean if a field has been set.
func (o *ProductAllOf) HasCategoryIds() bool {
	if o != nil && o.CategoryIds != nil {
		return true
	}

	return false
}

// SetCategoryIds gets a reference to the given []string and assigns it to the CategoryIds field.
func (o *ProductAllOf) SetCategoryIds(v []string) {
	o.CategoryIds = v
}

// GetManufacturerId returns the ManufacturerId field value if set, zero value otherwise.
func (o *ProductAllOf) GetManufacturerId() string {
	if o == nil || o.ManufacturerId == nil {
		var ret string
		return ret
	}
	return *o.ManufacturerId
}

// GetManufacturerIdOk returns a tuple with the ManufacturerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductAllOf) GetManufacturerIdOk() (*string, bool) {
	if o == nil || o.ManufacturerId == nil {
		return nil, false
	}
	return o.ManufacturerId, true
}

// HasManufacturerId returns a boolean if a field has been set.
func (o *ProductAllOf) HasManufacturerId() bool {
	if o != nil && o.ManufacturerId != nil {
		return true
	}

	return false
}

// SetManufacturerId gets a reference to the given string and assigns it to the ManufacturerId field.
func (o *ProductAllOf) SetManufacturerId(v string) {
	o.ManufacturerId = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *ProductAllOf) GetStatus() ProductStatus {
	if o == nil || o.Status == nil {
		var ret ProductStatus
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductAllOf) GetStatusOk() (*ProductStatus, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *ProductAllOf) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given ProductStatus and assigns it to the Status field.
func (o *ProductAllOf) SetStatus(v ProductStatus) {
	o.Status = &v
}

// GetStockCount returns the StockCount field value if set, zero value otherwise.
func (o *ProductAllOf) GetStockCount() int64 {
	if o == nil || o.StockCount == nil {
		var ret int64
		return ret
	}
	return *o.StockCount
}

// GetStockCountOk returns a tuple with the StockCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductAllOf) GetStockCountOk() (*int64, bool) {
	if o == nil || o.StockCount == nil {
		return nil, false
	}
	return o.StockCount, true
}

// HasStockCount returns a boolean if a field has been set.
func (o *ProductAllOf) HasStockCount() bool {
	if o != nil && o.StockCount != nil {
		return true
	}

	return false
}

// SetStockCount gets a reference to the given int64 and assigns it to the StockCount field.
func (o *ProductAllOf) SetStockCount(v int64) {
	o.StockCount = &v
}

// GetImageUrls returns the ImageUrls field value if set, zero value otherwise.
func (o *ProductAllOf) GetImageUrls() []map[string]string {
	if o == nil || o.ImageUrls == nil {
		var ret []map[string]string
		return ret
	}
	return o.ImageUrls
}

// GetImageUrlsOk returns a tuple with the ImageUrls field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductAllOf) GetImageUrlsOk() ([]map[string]string, bool) {
	if o == nil || o.ImageUrls == nil {
		return nil, false
	}
	return o.ImageUrls, true
}

// HasImageUrls returns a boolean if a field has been set.
func (o *ProductAllOf) HasImageUrls() bool {
	if o != nil && o.ImageUrls != nil {
		return true
	}

	return false
}

// SetImageUrls gets a reference to the given []map[string]string and assigns it to the ImageUrls field.
func (o *ProductAllOf) SetImageUrls(v []map[string]string) {
	o.ImageUrls = v
}

func (o ProductAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["name"] = o.Name
	}
	if o.DescriptionShort != nil {
		toSerialize["description_short"] = o.DescriptionShort
	}
	if o.DescriptionLong != nil {
		toSerialize["description_long"] = o.DescriptionLong
	}
	if true {
		toSerialize["price"] = o.Price
	}
	if o.CategoryIds != nil {
		toSerialize["category_ids"] = o.CategoryIds
	}
	if o.ManufacturerId != nil {
		toSerialize["manufacturer_id"] = o.ManufacturerId
	}
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
	if o.StockCount != nil {
		toSerialize["stock_count"] = o.StockCount
	}
	if o.ImageUrls != nil {
		toSerialize["image_urls"] = o.ImageUrls
	}
	return json.Marshal(toSerialize)
}

type NullableProductAllOf struct {
	value *ProductAllOf
	isSet bool
}

func (v NullableProductAllOf) Get() *ProductAllOf {
	return v.value
}

func (v *NullableProductAllOf) Set(val *ProductAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableProductAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableProductAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProductAllOf(val *ProductAllOf) *NullableProductAllOf {
	return &NullableProductAllOf{value: val, isSet: true}
}

func (v NullableProductAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProductAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


