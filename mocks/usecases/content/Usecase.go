// Code generated by mockery v2.39.1. DO NOT EDIT.

package content

import (
	entities "github.com/JenswBE/go-commerce/entities"
	mock "github.com/stretchr/testify/mock"
)

// Usecase is an autogenerated mock type for the Usecase type
type Usecase struct {
	mock.Mock
}

type Usecase_Expecter struct {
	mock *mock.Mock
}

func (_m *Usecase) EXPECT() *Usecase_Expecter {
	return &Usecase_Expecter{mock: &_m.Mock}
}

// CreateContent provides a mock function with given fields: e
func (_m *Usecase) CreateContent(e *entities.Content) (*entities.Content, error) {
	ret := _m.Called(e)

	if len(ret) == 0 {
		panic("no return value specified for CreateContent")
	}

	var r0 *entities.Content
	var r1 error
	if rf, ok := ret.Get(0).(func(*entities.Content) (*entities.Content, error)); ok {
		return rf(e)
	}
	if rf, ok := ret.Get(0).(func(*entities.Content) *entities.Content); ok {
		r0 = rf(e)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Content)
		}
	}

	if rf, ok := ret.Get(1).(func(*entities.Content) error); ok {
		r1 = rf(e)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Usecase_CreateContent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateContent'
type Usecase_CreateContent_Call struct {
	*mock.Call
}

// CreateContent is a helper method to define mock.On call
//   - e *entities.Content
func (_e *Usecase_Expecter) CreateContent(e interface{}) *Usecase_CreateContent_Call {
	return &Usecase_CreateContent_Call{Call: _e.mock.On("CreateContent", e)}
}

func (_c *Usecase_CreateContent_Call) Run(run func(e *entities.Content)) *Usecase_CreateContent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entities.Content))
	})
	return _c
}

func (_c *Usecase_CreateContent_Call) Return(_a0 *entities.Content, _a1 error) *Usecase_CreateContent_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Usecase_CreateContent_Call) RunAndReturn(run func(*entities.Content) (*entities.Content, error)) *Usecase_CreateContent_Call {
	_c.Call.Return(run)
	return _c
}

// CreateEvent provides a mock function with given fields: e
func (_m *Usecase) CreateEvent(e *entities.Event) (*entities.Event, error) {
	ret := _m.Called(e)

	if len(ret) == 0 {
		panic("no return value specified for CreateEvent")
	}

	var r0 *entities.Event
	var r1 error
	if rf, ok := ret.Get(0).(func(*entities.Event) (*entities.Event, error)); ok {
		return rf(e)
	}
	if rf, ok := ret.Get(0).(func(*entities.Event) *entities.Event); ok {
		r0 = rf(e)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Event)
		}
	}

	if rf, ok := ret.Get(1).(func(*entities.Event) error); ok {
		r1 = rf(e)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Usecase_CreateEvent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateEvent'
type Usecase_CreateEvent_Call struct {
	*mock.Call
}

// CreateEvent is a helper method to define mock.On call
//   - e *entities.Event
func (_e *Usecase_Expecter) CreateEvent(e interface{}) *Usecase_CreateEvent_Call {
	return &Usecase_CreateEvent_Call{Call: _e.mock.On("CreateEvent", e)}
}

func (_c *Usecase_CreateEvent_Call) Run(run func(e *entities.Event)) *Usecase_CreateEvent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entities.Event))
	})
	return _c
}

func (_c *Usecase_CreateEvent_Call) Return(_a0 *entities.Event, _a1 error) *Usecase_CreateEvent_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Usecase_CreateEvent_Call) RunAndReturn(run func(*entities.Event) (*entities.Event, error)) *Usecase_CreateEvent_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteContent provides a mock function with given fields: name
func (_m *Usecase) DeleteContent(name string) error {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for DeleteContent")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Usecase_DeleteContent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteContent'
type Usecase_DeleteContent_Call struct {
	*mock.Call
}

// DeleteContent is a helper method to define mock.On call
//   - name string
func (_e *Usecase_Expecter) DeleteContent(name interface{}) *Usecase_DeleteContent_Call {
	return &Usecase_DeleteContent_Call{Call: _e.mock.On("DeleteContent", name)}
}

func (_c *Usecase_DeleteContent_Call) Run(run func(name string)) *Usecase_DeleteContent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Usecase_DeleteContent_Call) Return(_a0 error) *Usecase_DeleteContent_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Usecase_DeleteContent_Call) RunAndReturn(run func(string) error) *Usecase_DeleteContent_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteEvent provides a mock function with given fields: id
func (_m *Usecase) DeleteEvent(id entities.ID) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteEvent")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(entities.ID) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Usecase_DeleteEvent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteEvent'
type Usecase_DeleteEvent_Call struct {
	*mock.Call
}

// DeleteEvent is a helper method to define mock.On call
//   - id entities.ID
func (_e *Usecase_Expecter) DeleteEvent(id interface{}) *Usecase_DeleteEvent_Call {
	return &Usecase_DeleteEvent_Call{Call: _e.mock.On("DeleteEvent", id)}
}

func (_c *Usecase_DeleteEvent_Call) Run(run func(id entities.ID)) *Usecase_DeleteEvent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(entities.ID))
	})
	return _c
}

func (_c *Usecase_DeleteEvent_Call) Return(_a0 error) *Usecase_DeleteEvent_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Usecase_DeleteEvent_Call) RunAndReturn(run func(entities.ID) error) *Usecase_DeleteEvent_Call {
	_c.Call.Return(run)
	return _c
}

// GetContent provides a mock function with given fields: name
func (_m *Usecase) GetContent(name string) (*entities.Content, error) {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for GetContent")
	}

	var r0 *entities.Content
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*entities.Content, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) *entities.Content); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Content)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Usecase_GetContent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetContent'
type Usecase_GetContent_Call struct {
	*mock.Call
}

// GetContent is a helper method to define mock.On call
//   - name string
func (_e *Usecase_Expecter) GetContent(name interface{}) *Usecase_GetContent_Call {
	return &Usecase_GetContent_Call{Call: _e.mock.On("GetContent", name)}
}

func (_c *Usecase_GetContent_Call) Run(run func(name string)) *Usecase_GetContent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Usecase_GetContent_Call) Return(_a0 *entities.Content, _a1 error) *Usecase_GetContent_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Usecase_GetContent_Call) RunAndReturn(run func(string) (*entities.Content, error)) *Usecase_GetContent_Call {
	_c.Call.Return(run)
	return _c
}

// GetEvent provides a mock function with given fields: id
func (_m *Usecase) GetEvent(id entities.ID) (*entities.Event, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetEvent")
	}

	var r0 *entities.Event
	var r1 error
	if rf, ok := ret.Get(0).(func(entities.ID) (*entities.Event, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(entities.ID) *entities.Event); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Event)
		}
	}

	if rf, ok := ret.Get(1).(func(entities.ID) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Usecase_GetEvent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEvent'
type Usecase_GetEvent_Call struct {
	*mock.Call
}

// GetEvent is a helper method to define mock.On call
//   - id entities.ID
func (_e *Usecase_Expecter) GetEvent(id interface{}) *Usecase_GetEvent_Call {
	return &Usecase_GetEvent_Call{Call: _e.mock.On("GetEvent", id)}
}

func (_c *Usecase_GetEvent_Call) Run(run func(id entities.ID)) *Usecase_GetEvent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(entities.ID))
	})
	return _c
}

func (_c *Usecase_GetEvent_Call) Return(_a0 *entities.Event, _a1 error) *Usecase_GetEvent_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Usecase_GetEvent_Call) RunAndReturn(run func(entities.ID) (*entities.Event, error)) *Usecase_GetEvent_Call {
	_c.Call.Return(run)
	return _c
}

// ListContent provides a mock function with given fields:
func (_m *Usecase) ListContent() ([]*entities.Content, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ListContent")
	}

	var r0 []*entities.Content
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]*entities.Content, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []*entities.Content); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.Content)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Usecase_ListContent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListContent'
type Usecase_ListContent_Call struct {
	*mock.Call
}

// ListContent is a helper method to define mock.On call
func (_e *Usecase_Expecter) ListContent() *Usecase_ListContent_Call {
	return &Usecase_ListContent_Call{Call: _e.mock.On("ListContent")}
}

func (_c *Usecase_ListContent_Call) Run(run func()) *Usecase_ListContent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Usecase_ListContent_Call) Return(_a0 []*entities.Content, _a1 error) *Usecase_ListContent_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Usecase_ListContent_Call) RunAndReturn(run func() ([]*entities.Content, error)) *Usecase_ListContent_Call {
	_c.Call.Return(run)
	return _c
}

// ListEvents provides a mock function with given fields: includePastEvents
func (_m *Usecase) ListEvents(includePastEvents bool) ([]*entities.Event, error) {
	ret := _m.Called(includePastEvents)

	if len(ret) == 0 {
		panic("no return value specified for ListEvents")
	}

	var r0 []*entities.Event
	var r1 error
	if rf, ok := ret.Get(0).(func(bool) ([]*entities.Event, error)); ok {
		return rf(includePastEvents)
	}
	if rf, ok := ret.Get(0).(func(bool) []*entities.Event); ok {
		r0 = rf(includePastEvents)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.Event)
		}
	}

	if rf, ok := ret.Get(1).(func(bool) error); ok {
		r1 = rf(includePastEvents)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Usecase_ListEvents_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListEvents'
type Usecase_ListEvents_Call struct {
	*mock.Call
}

// ListEvents is a helper method to define mock.On call
//   - includePastEvents bool
func (_e *Usecase_Expecter) ListEvents(includePastEvents interface{}) *Usecase_ListEvents_Call {
	return &Usecase_ListEvents_Call{Call: _e.mock.On("ListEvents", includePastEvents)}
}

func (_c *Usecase_ListEvents_Call) Run(run func(includePastEvents bool)) *Usecase_ListEvents_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(bool))
	})
	return _c
}

func (_c *Usecase_ListEvents_Call) Return(_a0 []*entities.Event, _a1 error) *Usecase_ListEvents_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Usecase_ListEvents_Call) RunAndReturn(run func(bool) ([]*entities.Event, error)) *Usecase_ListEvents_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateContent provides a mock function with given fields: e
func (_m *Usecase) UpdateContent(e *entities.Content) (*entities.Content, error) {
	ret := _m.Called(e)

	if len(ret) == 0 {
		panic("no return value specified for UpdateContent")
	}

	var r0 *entities.Content
	var r1 error
	if rf, ok := ret.Get(0).(func(*entities.Content) (*entities.Content, error)); ok {
		return rf(e)
	}
	if rf, ok := ret.Get(0).(func(*entities.Content) *entities.Content); ok {
		r0 = rf(e)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Content)
		}
	}

	if rf, ok := ret.Get(1).(func(*entities.Content) error); ok {
		r1 = rf(e)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Usecase_UpdateContent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateContent'
type Usecase_UpdateContent_Call struct {
	*mock.Call
}

// UpdateContent is a helper method to define mock.On call
//   - e *entities.Content
func (_e *Usecase_Expecter) UpdateContent(e interface{}) *Usecase_UpdateContent_Call {
	return &Usecase_UpdateContent_Call{Call: _e.mock.On("UpdateContent", e)}
}

func (_c *Usecase_UpdateContent_Call) Run(run func(e *entities.Content)) *Usecase_UpdateContent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entities.Content))
	})
	return _c
}

func (_c *Usecase_UpdateContent_Call) Return(_a0 *entities.Content, _a1 error) *Usecase_UpdateContent_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Usecase_UpdateContent_Call) RunAndReturn(run func(*entities.Content) (*entities.Content, error)) *Usecase_UpdateContent_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateEvent provides a mock function with given fields: e
func (_m *Usecase) UpdateEvent(e *entities.Event) (*entities.Event, error) {
	ret := _m.Called(e)

	if len(ret) == 0 {
		panic("no return value specified for UpdateEvent")
	}

	var r0 *entities.Event
	var r1 error
	if rf, ok := ret.Get(0).(func(*entities.Event) (*entities.Event, error)); ok {
		return rf(e)
	}
	if rf, ok := ret.Get(0).(func(*entities.Event) *entities.Event); ok {
		r0 = rf(e)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Event)
		}
	}

	if rf, ok := ret.Get(1).(func(*entities.Event) error); ok {
		r1 = rf(e)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Usecase_UpdateEvent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateEvent'
type Usecase_UpdateEvent_Call struct {
	*mock.Call
}

// UpdateEvent is a helper method to define mock.On call
//   - e *entities.Event
func (_e *Usecase_Expecter) UpdateEvent(e interface{}) *Usecase_UpdateEvent_Call {
	return &Usecase_UpdateEvent_Call{Call: _e.mock.On("UpdateEvent", e)}
}

func (_c *Usecase_UpdateEvent_Call) Run(run func(e *entities.Event)) *Usecase_UpdateEvent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entities.Event))
	})
	return _c
}

func (_c *Usecase_UpdateEvent_Call) Return(_a0 *entities.Event, _a1 error) *Usecase_UpdateEvent_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Usecase_UpdateEvent_Call) RunAndReturn(run func(*entities.Event) (*entities.Event, error)) *Usecase_UpdateEvent_Call {
	_c.Call.Return(run)
	return _c
}

// NewUsecase creates a new instance of Usecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *Usecase {
	mock := &Usecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
