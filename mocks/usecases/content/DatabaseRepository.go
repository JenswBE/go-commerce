// Code generated by mockery v2.12.1. DO NOT EDIT.

package mocks

import (
	entities "github.com/JenswBE/go-commerce/entities"
	mock "github.com/stretchr/testify/mock"

	testing "testing"
)

// DatabaseRepository is an autogenerated mock type for the DatabaseRepository type
type DatabaseRepository struct {
	mock.Mock
}

// CreateContent provides a mock function with given fields: e
func (_m *DatabaseRepository) CreateContent(e *entities.Content) (*entities.Content, error) {
	ret := _m.Called(e)

	var r0 *entities.Content
	if rf, ok := ret.Get(0).(func(*entities.Content) *entities.Content); ok {
		r0 = rf(e)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Content)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*entities.Content) error); ok {
		r1 = rf(e)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateEvent provides a mock function with given fields: e
func (_m *DatabaseRepository) CreateEvent(e *entities.Event) (*entities.Event, error) {
	ret := _m.Called(e)

	var r0 *entities.Event
	if rf, ok := ret.Get(0).(func(*entities.Event) *entities.Event); ok {
		r0 = rf(e)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Event)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*entities.Event) error); ok {
		r1 = rf(e)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteContent provides a mock function with given fields: name
func (_m *DatabaseRepository) DeleteContent(name string) error {
	ret := _m.Called(name)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteEvent provides a mock function with given fields: id
func (_m *DatabaseRepository) DeleteEvent(id entities.ID) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(entities.ID) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetContent provides a mock function with given fields: name
func (_m *DatabaseRepository) GetContent(name string) (*entities.Content, error) {
	ret := _m.Called(name)

	var r0 *entities.Content
	if rf, ok := ret.Get(0).(func(string) *entities.Content); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Content)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEvent provides a mock function with given fields: id
func (_m *DatabaseRepository) GetEvent(id entities.ID) (*entities.Event, error) {
	ret := _m.Called(id)

	var r0 *entities.Event
	if rf, ok := ret.Get(0).(func(entities.ID) *entities.Event); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Event)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(entities.ID) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListContent provides a mock function with given fields:
func (_m *DatabaseRepository) ListContent() ([]*entities.Content, error) {
	ret := _m.Called()

	var r0 []*entities.Content
	if rf, ok := ret.Get(0).(func() []*entities.Content); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.Content)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListEvents provides a mock function with given fields: includePastEvents
func (_m *DatabaseRepository) ListEvents(includePastEvents bool) ([]*entities.Event, error) {
	ret := _m.Called(includePastEvents)

	var r0 []*entities.Event
	if rf, ok := ret.Get(0).(func(bool) []*entities.Event); ok {
		r0 = rf(includePastEvents)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.Event)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(bool) error); ok {
		r1 = rf(includePastEvents)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateContent provides a mock function with given fields: e
func (_m *DatabaseRepository) UpdateContent(e *entities.Content) (*entities.Content, error) {
	ret := _m.Called(e)

	var r0 *entities.Content
	if rf, ok := ret.Get(0).(func(*entities.Content) *entities.Content); ok {
		r0 = rf(e)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Content)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*entities.Content) error); ok {
		r1 = rf(e)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateEvent provides a mock function with given fields: e
func (_m *DatabaseRepository) UpdateEvent(e *entities.Event) (*entities.Event, error) {
	ret := _m.Called(e)

	var r0 *entities.Event
	if rf, ok := ret.Get(0).(func(*entities.Event) *entities.Event); ok {
		r0 = rf(e)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Event)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*entities.Event) error); ok {
		r1 = rf(e)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewDatabaseRepository creates a new instance of DatabaseRepository. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewDatabaseRepository(t testing.TB) *DatabaseRepository {
	mock := &DatabaseRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
