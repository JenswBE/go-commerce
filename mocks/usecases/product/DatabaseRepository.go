// Code generated by mockery v2.12.1. DO NOT EDIT.

package mocks

import (
	entities "github.com/JenswBE/go-commerce/entities"
	mock "github.com/stretchr/testify/mock"

	testing "testing"
)

// DatabaseRepository is an autogenerated mock type for the DatabaseRepository type
type DatabaseRepository struct {
	mock.Mock
}

// CreateCategory provides a mock function with given fields: e
func (_m *DatabaseRepository) CreateCategory(e *entities.Category) (*entities.Category, error) {
	ret := _m.Called(e)

	var r0 *entities.Category
	if rf, ok := ret.Get(0).(func(*entities.Category) *entities.Category); ok {
		r0 = rf(e)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Category)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*entities.Category) error); ok {
		r1 = rf(e)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateManufacturer provides a mock function with given fields: e
func (_m *DatabaseRepository) CreateManufacturer(e *entities.Manufacturer) (*entities.Manufacturer, error) {
	ret := _m.Called(e)

	var r0 *entities.Manufacturer
	if rf, ok := ret.Get(0).(func(*entities.Manufacturer) *entities.Manufacturer); ok {
		r0 = rf(e)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Manufacturer)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*entities.Manufacturer) error); ok {
		r1 = rf(e)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateProduct provides a mock function with given fields: e
func (_m *DatabaseRepository) CreateProduct(e *entities.Product) (*entities.Product, error) {
	ret := _m.Called(e)

	var r0 *entities.Product
	if rf, ok := ret.Get(0).(func(*entities.Product) *entities.Product); ok {
		r0 = rf(e)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Product)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*entities.Product) error); ok {
		r1 = rf(e)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteCategory provides a mock function with given fields: id
func (_m *DatabaseRepository) DeleteCategory(id entities.ID) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(entities.ID) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteImage provides a mock function with given fields: id
func (_m *DatabaseRepository) DeleteImage(id entities.ID) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(entities.ID) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteManufacturer provides a mock function with given fields: id
func (_m *DatabaseRepository) DeleteManufacturer(id entities.ID) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(entities.ID) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteProduct provides a mock function with given fields: id
func (_m *DatabaseRepository) DeleteProduct(id entities.ID) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(entities.ID) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetCategory provides a mock function with given fields: id
func (_m *DatabaseRepository) GetCategory(id entities.ID) (*entities.Category, error) {
	ret := _m.Called(id)

	var r0 *entities.Category
	if rf, ok := ret.Get(0).(func(entities.ID) *entities.Category); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Category)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(entities.ID) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetImage provides a mock function with given fields: id
func (_m *DatabaseRepository) GetImage(id entities.ID) (*entities.Image, error) {
	ret := _m.Called(id)

	var r0 *entities.Image
	if rf, ok := ret.Get(0).(func(entities.ID) *entities.Image); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Image)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(entities.ID) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetManufacturer provides a mock function with given fields: id
func (_m *DatabaseRepository) GetManufacturer(id entities.ID) (*entities.Manufacturer, error) {
	ret := _m.Called(id)

	var r0 *entities.Manufacturer
	if rf, ok := ret.Get(0).(func(entities.ID) *entities.Manufacturer); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Manufacturer)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(entities.ID) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProduct provides a mock function with given fields: id
func (_m *DatabaseRepository) GetProduct(id entities.ID) (*entities.Product, error) {
	ret := _m.Called(id)

	var r0 *entities.Product
	if rf, ok := ret.Get(0).(func(entities.ID) *entities.Product); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Product)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(entities.ID) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListCategories provides a mock function with given fields:
func (_m *DatabaseRepository) ListCategories() ([]*entities.Category, error) {
	ret := _m.Called()

	var r0 []*entities.Category
	if rf, ok := ret.Get(0).(func() []*entities.Category); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.Category)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListManufacturers provides a mock function with given fields:
func (_m *DatabaseRepository) ListManufacturers() ([]*entities.Manufacturer, error) {
	ret := _m.Called()

	var r0 []*entities.Manufacturer
	if rf, ok := ret.Get(0).(func() []*entities.Manufacturer); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.Manufacturer)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListProducts provides a mock function with given fields:
func (_m *DatabaseRepository) ListProducts() ([]*entities.Product, error) {
	ret := _m.Called()

	var r0 []*entities.Product
	if rf, ok := ret.Get(0).(func() []*entities.Product); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.Product)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateCategory provides a mock function with given fields: e
func (_m *DatabaseRepository) UpdateCategory(e *entities.Category) (*entities.Category, error) {
	ret := _m.Called(e)

	var r0 *entities.Category
	if rf, ok := ret.Get(0).(func(*entities.Category) *entities.Category); ok {
		r0 = rf(e)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Category)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*entities.Category) error); ok {
		r1 = rf(e)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateImage provides a mock function with given fields: id, ownerID, newOrder
func (_m *DatabaseRepository) UpdateImage(id entities.ID, ownerID entities.ID, newOrder int) ([]*entities.Image, error) {
	ret := _m.Called(id, ownerID, newOrder)

	var r0 []*entities.Image
	if rf, ok := ret.Get(0).(func(entities.ID, entities.ID, int) []*entities.Image); ok {
		r0 = rf(id, ownerID, newOrder)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.Image)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(entities.ID, entities.ID, int) error); ok {
		r1 = rf(id, ownerID, newOrder)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateManufacturer provides a mock function with given fields: e
func (_m *DatabaseRepository) UpdateManufacturer(e *entities.Manufacturer) (*entities.Manufacturer, error) {
	ret := _m.Called(e)

	var r0 *entities.Manufacturer
	if rf, ok := ret.Get(0).(func(*entities.Manufacturer) *entities.Manufacturer); ok {
		r0 = rf(e)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Manufacturer)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*entities.Manufacturer) error); ok {
		r1 = rf(e)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateProduct provides a mock function with given fields: e
func (_m *DatabaseRepository) UpdateProduct(e *entities.Product) (*entities.Product, error) {
	ret := _m.Called(e)

	var r0 *entities.Product
	if rf, ok := ret.Get(0).(func(*entities.Product) *entities.Product); ok {
		r0 = rf(e)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Product)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*entities.Product) error); ok {
		r1 = rf(e)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateProductImages provides a mock function with given fields: id, images
func (_m *DatabaseRepository) UpdateProductImages(id entities.ID, images []*entities.Image) ([]*entities.Image, error) {
	ret := _m.Called(id, images)

	var r0 []*entities.Image
	if rf, ok := ret.Get(0).(func(entities.ID, []*entities.Image) []*entities.Image); ok {
		r0 = rf(id, images)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.Image)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(entities.ID, []*entities.Image) error); ok {
		r1 = rf(id, images)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewDatabaseRepository creates a new instance of DatabaseRepository. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewDatabaseRepository(t testing.TB) *DatabaseRepository {
	mock := &DatabaseRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
