// Code generated by mockery v2.39.1. DO NOT EDIT.

package product

import (
	entities "github.com/JenswBE/go-commerce/entities"
	mock "github.com/stretchr/testify/mock"
)

// DatabaseRepository is an autogenerated mock type for the DatabaseRepository type
type DatabaseRepository struct {
	mock.Mock
}

type DatabaseRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *DatabaseRepository) EXPECT() *DatabaseRepository_Expecter {
	return &DatabaseRepository_Expecter{mock: &_m.Mock}
}

// CreateCategory provides a mock function with given fields: e
func (_m *DatabaseRepository) CreateCategory(e *entities.Category) (*entities.Category, error) {
	ret := _m.Called(e)

	if len(ret) == 0 {
		panic("no return value specified for CreateCategory")
	}

	var r0 *entities.Category
	var r1 error
	if rf, ok := ret.Get(0).(func(*entities.Category) (*entities.Category, error)); ok {
		return rf(e)
	}
	if rf, ok := ret.Get(0).(func(*entities.Category) *entities.Category); ok {
		r0 = rf(e)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Category)
		}
	}

	if rf, ok := ret.Get(1).(func(*entities.Category) error); ok {
		r1 = rf(e)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DatabaseRepository_CreateCategory_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateCategory'
type DatabaseRepository_CreateCategory_Call struct {
	*mock.Call
}

// CreateCategory is a helper method to define mock.On call
//   - e *entities.Category
func (_e *DatabaseRepository_Expecter) CreateCategory(e interface{}) *DatabaseRepository_CreateCategory_Call {
	return &DatabaseRepository_CreateCategory_Call{Call: _e.mock.On("CreateCategory", e)}
}

func (_c *DatabaseRepository_CreateCategory_Call) Run(run func(e *entities.Category)) *DatabaseRepository_CreateCategory_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entities.Category))
	})
	return _c
}

func (_c *DatabaseRepository_CreateCategory_Call) Return(_a0 *entities.Category, _a1 error) *DatabaseRepository_CreateCategory_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DatabaseRepository_CreateCategory_Call) RunAndReturn(run func(*entities.Category) (*entities.Category, error)) *DatabaseRepository_CreateCategory_Call {
	_c.Call.Return(run)
	return _c
}

// CreateManufacturer provides a mock function with given fields: e
func (_m *DatabaseRepository) CreateManufacturer(e *entities.Manufacturer) (*entities.Manufacturer, error) {
	ret := _m.Called(e)

	if len(ret) == 0 {
		panic("no return value specified for CreateManufacturer")
	}

	var r0 *entities.Manufacturer
	var r1 error
	if rf, ok := ret.Get(0).(func(*entities.Manufacturer) (*entities.Manufacturer, error)); ok {
		return rf(e)
	}
	if rf, ok := ret.Get(0).(func(*entities.Manufacturer) *entities.Manufacturer); ok {
		r0 = rf(e)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Manufacturer)
		}
	}

	if rf, ok := ret.Get(1).(func(*entities.Manufacturer) error); ok {
		r1 = rf(e)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DatabaseRepository_CreateManufacturer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateManufacturer'
type DatabaseRepository_CreateManufacturer_Call struct {
	*mock.Call
}

// CreateManufacturer is a helper method to define mock.On call
//   - e *entities.Manufacturer
func (_e *DatabaseRepository_Expecter) CreateManufacturer(e interface{}) *DatabaseRepository_CreateManufacturer_Call {
	return &DatabaseRepository_CreateManufacturer_Call{Call: _e.mock.On("CreateManufacturer", e)}
}

func (_c *DatabaseRepository_CreateManufacturer_Call) Run(run func(e *entities.Manufacturer)) *DatabaseRepository_CreateManufacturer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entities.Manufacturer))
	})
	return _c
}

func (_c *DatabaseRepository_CreateManufacturer_Call) Return(_a0 *entities.Manufacturer, _a1 error) *DatabaseRepository_CreateManufacturer_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DatabaseRepository_CreateManufacturer_Call) RunAndReturn(run func(*entities.Manufacturer) (*entities.Manufacturer, error)) *DatabaseRepository_CreateManufacturer_Call {
	_c.Call.Return(run)
	return _c
}

// CreateProduct provides a mock function with given fields: e
func (_m *DatabaseRepository) CreateProduct(e *entities.Product) (*entities.Product, error) {
	ret := _m.Called(e)

	if len(ret) == 0 {
		panic("no return value specified for CreateProduct")
	}

	var r0 *entities.Product
	var r1 error
	if rf, ok := ret.Get(0).(func(*entities.Product) (*entities.Product, error)); ok {
		return rf(e)
	}
	if rf, ok := ret.Get(0).(func(*entities.Product) *entities.Product); ok {
		r0 = rf(e)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Product)
		}
	}

	if rf, ok := ret.Get(1).(func(*entities.Product) error); ok {
		r1 = rf(e)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DatabaseRepository_CreateProduct_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateProduct'
type DatabaseRepository_CreateProduct_Call struct {
	*mock.Call
}

// CreateProduct is a helper method to define mock.On call
//   - e *entities.Product
func (_e *DatabaseRepository_Expecter) CreateProduct(e interface{}) *DatabaseRepository_CreateProduct_Call {
	return &DatabaseRepository_CreateProduct_Call{Call: _e.mock.On("CreateProduct", e)}
}

func (_c *DatabaseRepository_CreateProduct_Call) Run(run func(e *entities.Product)) *DatabaseRepository_CreateProduct_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entities.Product))
	})
	return _c
}

func (_c *DatabaseRepository_CreateProduct_Call) Return(_a0 *entities.Product, _a1 error) *DatabaseRepository_CreateProduct_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DatabaseRepository_CreateProduct_Call) RunAndReturn(run func(*entities.Product) (*entities.Product, error)) *DatabaseRepository_CreateProduct_Call {
	_c.Call.Return(run)
	return _c
}

// CreateService provides a mock function with given fields: e
func (_m *DatabaseRepository) CreateService(e *entities.Service) (*entities.Service, error) {
	ret := _m.Called(e)

	if len(ret) == 0 {
		panic("no return value specified for CreateService")
	}

	var r0 *entities.Service
	var r1 error
	if rf, ok := ret.Get(0).(func(*entities.Service) (*entities.Service, error)); ok {
		return rf(e)
	}
	if rf, ok := ret.Get(0).(func(*entities.Service) *entities.Service); ok {
		r0 = rf(e)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Service)
		}
	}

	if rf, ok := ret.Get(1).(func(*entities.Service) error); ok {
		r1 = rf(e)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DatabaseRepository_CreateService_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateService'
type DatabaseRepository_CreateService_Call struct {
	*mock.Call
}

// CreateService is a helper method to define mock.On call
//   - e *entities.Service
func (_e *DatabaseRepository_Expecter) CreateService(e interface{}) *DatabaseRepository_CreateService_Call {
	return &DatabaseRepository_CreateService_Call{Call: _e.mock.On("CreateService", e)}
}

func (_c *DatabaseRepository_CreateService_Call) Run(run func(e *entities.Service)) *DatabaseRepository_CreateService_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entities.Service))
	})
	return _c
}

func (_c *DatabaseRepository_CreateService_Call) Return(_a0 *entities.Service, _a1 error) *DatabaseRepository_CreateService_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DatabaseRepository_CreateService_Call) RunAndReturn(run func(*entities.Service) (*entities.Service, error)) *DatabaseRepository_CreateService_Call {
	_c.Call.Return(run)
	return _c
}

// CreateServiceCategory provides a mock function with given fields: e
func (_m *DatabaseRepository) CreateServiceCategory(e *entities.ServiceCategory) (*entities.ServiceCategory, error) {
	ret := _m.Called(e)

	if len(ret) == 0 {
		panic("no return value specified for CreateServiceCategory")
	}

	var r0 *entities.ServiceCategory
	var r1 error
	if rf, ok := ret.Get(0).(func(*entities.ServiceCategory) (*entities.ServiceCategory, error)); ok {
		return rf(e)
	}
	if rf, ok := ret.Get(0).(func(*entities.ServiceCategory) *entities.ServiceCategory); ok {
		r0 = rf(e)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.ServiceCategory)
		}
	}

	if rf, ok := ret.Get(1).(func(*entities.ServiceCategory) error); ok {
		r1 = rf(e)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DatabaseRepository_CreateServiceCategory_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateServiceCategory'
type DatabaseRepository_CreateServiceCategory_Call struct {
	*mock.Call
}

// CreateServiceCategory is a helper method to define mock.On call
//   - e *entities.ServiceCategory
func (_e *DatabaseRepository_Expecter) CreateServiceCategory(e interface{}) *DatabaseRepository_CreateServiceCategory_Call {
	return &DatabaseRepository_CreateServiceCategory_Call{Call: _e.mock.On("CreateServiceCategory", e)}
}

func (_c *DatabaseRepository_CreateServiceCategory_Call) Run(run func(e *entities.ServiceCategory)) *DatabaseRepository_CreateServiceCategory_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entities.ServiceCategory))
	})
	return _c
}

func (_c *DatabaseRepository_CreateServiceCategory_Call) Return(_a0 *entities.ServiceCategory, _a1 error) *DatabaseRepository_CreateServiceCategory_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DatabaseRepository_CreateServiceCategory_Call) RunAndReturn(run func(*entities.ServiceCategory) (*entities.ServiceCategory, error)) *DatabaseRepository_CreateServiceCategory_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteCategory provides a mock function with given fields: id
func (_m *DatabaseRepository) DeleteCategory(id entities.ID) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteCategory")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(entities.ID) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DatabaseRepository_DeleteCategory_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteCategory'
type DatabaseRepository_DeleteCategory_Call struct {
	*mock.Call
}

// DeleteCategory is a helper method to define mock.On call
//   - id entities.ID
func (_e *DatabaseRepository_Expecter) DeleteCategory(id interface{}) *DatabaseRepository_DeleteCategory_Call {
	return &DatabaseRepository_DeleteCategory_Call{Call: _e.mock.On("DeleteCategory", id)}
}

func (_c *DatabaseRepository_DeleteCategory_Call) Run(run func(id entities.ID)) *DatabaseRepository_DeleteCategory_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(entities.ID))
	})
	return _c
}

func (_c *DatabaseRepository_DeleteCategory_Call) Return(_a0 error) *DatabaseRepository_DeleteCategory_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DatabaseRepository_DeleteCategory_Call) RunAndReturn(run func(entities.ID) error) *DatabaseRepository_DeleteCategory_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteImage provides a mock function with given fields: id
func (_m *DatabaseRepository) DeleteImage(id entities.ID) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteImage")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(entities.ID) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DatabaseRepository_DeleteImage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteImage'
type DatabaseRepository_DeleteImage_Call struct {
	*mock.Call
}

// DeleteImage is a helper method to define mock.On call
//   - id entities.ID
func (_e *DatabaseRepository_Expecter) DeleteImage(id interface{}) *DatabaseRepository_DeleteImage_Call {
	return &DatabaseRepository_DeleteImage_Call{Call: _e.mock.On("DeleteImage", id)}
}

func (_c *DatabaseRepository_DeleteImage_Call) Run(run func(id entities.ID)) *DatabaseRepository_DeleteImage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(entities.ID))
	})
	return _c
}

func (_c *DatabaseRepository_DeleteImage_Call) Return(_a0 error) *DatabaseRepository_DeleteImage_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DatabaseRepository_DeleteImage_Call) RunAndReturn(run func(entities.ID) error) *DatabaseRepository_DeleteImage_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteManufacturer provides a mock function with given fields: id
func (_m *DatabaseRepository) DeleteManufacturer(id entities.ID) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteManufacturer")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(entities.ID) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DatabaseRepository_DeleteManufacturer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteManufacturer'
type DatabaseRepository_DeleteManufacturer_Call struct {
	*mock.Call
}

// DeleteManufacturer is a helper method to define mock.On call
//   - id entities.ID
func (_e *DatabaseRepository_Expecter) DeleteManufacturer(id interface{}) *DatabaseRepository_DeleteManufacturer_Call {
	return &DatabaseRepository_DeleteManufacturer_Call{Call: _e.mock.On("DeleteManufacturer", id)}
}

func (_c *DatabaseRepository_DeleteManufacturer_Call) Run(run func(id entities.ID)) *DatabaseRepository_DeleteManufacturer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(entities.ID))
	})
	return _c
}

func (_c *DatabaseRepository_DeleteManufacturer_Call) Return(_a0 error) *DatabaseRepository_DeleteManufacturer_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DatabaseRepository_DeleteManufacturer_Call) RunAndReturn(run func(entities.ID) error) *DatabaseRepository_DeleteManufacturer_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteProduct provides a mock function with given fields: id
func (_m *DatabaseRepository) DeleteProduct(id entities.ID) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteProduct")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(entities.ID) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DatabaseRepository_DeleteProduct_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteProduct'
type DatabaseRepository_DeleteProduct_Call struct {
	*mock.Call
}

// DeleteProduct is a helper method to define mock.On call
//   - id entities.ID
func (_e *DatabaseRepository_Expecter) DeleteProduct(id interface{}) *DatabaseRepository_DeleteProduct_Call {
	return &DatabaseRepository_DeleteProduct_Call{Call: _e.mock.On("DeleteProduct", id)}
}

func (_c *DatabaseRepository_DeleteProduct_Call) Run(run func(id entities.ID)) *DatabaseRepository_DeleteProduct_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(entities.ID))
	})
	return _c
}

func (_c *DatabaseRepository_DeleteProduct_Call) Return(_a0 error) *DatabaseRepository_DeleteProduct_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DatabaseRepository_DeleteProduct_Call) RunAndReturn(run func(entities.ID) error) *DatabaseRepository_DeleteProduct_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteService provides a mock function with given fields: id
func (_m *DatabaseRepository) DeleteService(id entities.ID) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteService")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(entities.ID) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DatabaseRepository_DeleteService_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteService'
type DatabaseRepository_DeleteService_Call struct {
	*mock.Call
}

// DeleteService is a helper method to define mock.On call
//   - id entities.ID
func (_e *DatabaseRepository_Expecter) DeleteService(id interface{}) *DatabaseRepository_DeleteService_Call {
	return &DatabaseRepository_DeleteService_Call{Call: _e.mock.On("DeleteService", id)}
}

func (_c *DatabaseRepository_DeleteService_Call) Run(run func(id entities.ID)) *DatabaseRepository_DeleteService_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(entities.ID))
	})
	return _c
}

func (_c *DatabaseRepository_DeleteService_Call) Return(_a0 error) *DatabaseRepository_DeleteService_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DatabaseRepository_DeleteService_Call) RunAndReturn(run func(entities.ID) error) *DatabaseRepository_DeleteService_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteServiceCategory provides a mock function with given fields: id
func (_m *DatabaseRepository) DeleteServiceCategory(id entities.ID) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteServiceCategory")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(entities.ID) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DatabaseRepository_DeleteServiceCategory_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteServiceCategory'
type DatabaseRepository_DeleteServiceCategory_Call struct {
	*mock.Call
}

// DeleteServiceCategory is a helper method to define mock.On call
//   - id entities.ID
func (_e *DatabaseRepository_Expecter) DeleteServiceCategory(id interface{}) *DatabaseRepository_DeleteServiceCategory_Call {
	return &DatabaseRepository_DeleteServiceCategory_Call{Call: _e.mock.On("DeleteServiceCategory", id)}
}

func (_c *DatabaseRepository_DeleteServiceCategory_Call) Run(run func(id entities.ID)) *DatabaseRepository_DeleteServiceCategory_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(entities.ID))
	})
	return _c
}

func (_c *DatabaseRepository_DeleteServiceCategory_Call) Return(_a0 error) *DatabaseRepository_DeleteServiceCategory_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DatabaseRepository_DeleteServiceCategory_Call) RunAndReturn(run func(entities.ID) error) *DatabaseRepository_DeleteServiceCategory_Call {
	_c.Call.Return(run)
	return _c
}

// GetCategory provides a mock function with given fields: id
func (_m *DatabaseRepository) GetCategory(id entities.ID) (*entities.Category, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetCategory")
	}

	var r0 *entities.Category
	var r1 error
	if rf, ok := ret.Get(0).(func(entities.ID) (*entities.Category, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(entities.ID) *entities.Category); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Category)
		}
	}

	if rf, ok := ret.Get(1).(func(entities.ID) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DatabaseRepository_GetCategory_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCategory'
type DatabaseRepository_GetCategory_Call struct {
	*mock.Call
}

// GetCategory is a helper method to define mock.On call
//   - id entities.ID
func (_e *DatabaseRepository_Expecter) GetCategory(id interface{}) *DatabaseRepository_GetCategory_Call {
	return &DatabaseRepository_GetCategory_Call{Call: _e.mock.On("GetCategory", id)}
}

func (_c *DatabaseRepository_GetCategory_Call) Run(run func(id entities.ID)) *DatabaseRepository_GetCategory_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(entities.ID))
	})
	return _c
}

func (_c *DatabaseRepository_GetCategory_Call) Return(_a0 *entities.Category, _a1 error) *DatabaseRepository_GetCategory_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DatabaseRepository_GetCategory_Call) RunAndReturn(run func(entities.ID) (*entities.Category, error)) *DatabaseRepository_GetCategory_Call {
	_c.Call.Return(run)
	return _c
}

// GetImage provides a mock function with given fields: id
func (_m *DatabaseRepository) GetImage(id entities.ID) (*entities.Image, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetImage")
	}

	var r0 *entities.Image
	var r1 error
	if rf, ok := ret.Get(0).(func(entities.ID) (*entities.Image, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(entities.ID) *entities.Image); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Image)
		}
	}

	if rf, ok := ret.Get(1).(func(entities.ID) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DatabaseRepository_GetImage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetImage'
type DatabaseRepository_GetImage_Call struct {
	*mock.Call
}

// GetImage is a helper method to define mock.On call
//   - id entities.ID
func (_e *DatabaseRepository_Expecter) GetImage(id interface{}) *DatabaseRepository_GetImage_Call {
	return &DatabaseRepository_GetImage_Call{Call: _e.mock.On("GetImage", id)}
}

func (_c *DatabaseRepository_GetImage_Call) Run(run func(id entities.ID)) *DatabaseRepository_GetImage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(entities.ID))
	})
	return _c
}

func (_c *DatabaseRepository_GetImage_Call) Return(_a0 *entities.Image, _a1 error) *DatabaseRepository_GetImage_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DatabaseRepository_GetImage_Call) RunAndReturn(run func(entities.ID) (*entities.Image, error)) *DatabaseRepository_GetImage_Call {
	_c.Call.Return(run)
	return _c
}

// GetManufacturer provides a mock function with given fields: id
func (_m *DatabaseRepository) GetManufacturer(id entities.ID) (*entities.Manufacturer, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetManufacturer")
	}

	var r0 *entities.Manufacturer
	var r1 error
	if rf, ok := ret.Get(0).(func(entities.ID) (*entities.Manufacturer, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(entities.ID) *entities.Manufacturer); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Manufacturer)
		}
	}

	if rf, ok := ret.Get(1).(func(entities.ID) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DatabaseRepository_GetManufacturer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetManufacturer'
type DatabaseRepository_GetManufacturer_Call struct {
	*mock.Call
}

// GetManufacturer is a helper method to define mock.On call
//   - id entities.ID
func (_e *DatabaseRepository_Expecter) GetManufacturer(id interface{}) *DatabaseRepository_GetManufacturer_Call {
	return &DatabaseRepository_GetManufacturer_Call{Call: _e.mock.On("GetManufacturer", id)}
}

func (_c *DatabaseRepository_GetManufacturer_Call) Run(run func(id entities.ID)) *DatabaseRepository_GetManufacturer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(entities.ID))
	})
	return _c
}

func (_c *DatabaseRepository_GetManufacturer_Call) Return(_a0 *entities.Manufacturer, _a1 error) *DatabaseRepository_GetManufacturer_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DatabaseRepository_GetManufacturer_Call) RunAndReturn(run func(entities.ID) (*entities.Manufacturer, error)) *DatabaseRepository_GetManufacturer_Call {
	_c.Call.Return(run)
	return _c
}

// GetProduct provides a mock function with given fields: id
func (_m *DatabaseRepository) GetProduct(id entities.ID) (*entities.Product, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetProduct")
	}

	var r0 *entities.Product
	var r1 error
	if rf, ok := ret.Get(0).(func(entities.ID) (*entities.Product, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(entities.ID) *entities.Product); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Product)
		}
	}

	if rf, ok := ret.Get(1).(func(entities.ID) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DatabaseRepository_GetProduct_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProduct'
type DatabaseRepository_GetProduct_Call struct {
	*mock.Call
}

// GetProduct is a helper method to define mock.On call
//   - id entities.ID
func (_e *DatabaseRepository_Expecter) GetProduct(id interface{}) *DatabaseRepository_GetProduct_Call {
	return &DatabaseRepository_GetProduct_Call{Call: _e.mock.On("GetProduct", id)}
}

func (_c *DatabaseRepository_GetProduct_Call) Run(run func(id entities.ID)) *DatabaseRepository_GetProduct_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(entities.ID))
	})
	return _c
}

func (_c *DatabaseRepository_GetProduct_Call) Return(_a0 *entities.Product, _a1 error) *DatabaseRepository_GetProduct_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DatabaseRepository_GetProduct_Call) RunAndReturn(run func(entities.ID) (*entities.Product, error)) *DatabaseRepository_GetProduct_Call {
	_c.Call.Return(run)
	return _c
}

// GetService provides a mock function with given fields: id
func (_m *DatabaseRepository) GetService(id entities.ID) (*entities.Service, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetService")
	}

	var r0 *entities.Service
	var r1 error
	if rf, ok := ret.Get(0).(func(entities.ID) (*entities.Service, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(entities.ID) *entities.Service); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Service)
		}
	}

	if rf, ok := ret.Get(1).(func(entities.ID) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DatabaseRepository_GetService_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetService'
type DatabaseRepository_GetService_Call struct {
	*mock.Call
}

// GetService is a helper method to define mock.On call
//   - id entities.ID
func (_e *DatabaseRepository_Expecter) GetService(id interface{}) *DatabaseRepository_GetService_Call {
	return &DatabaseRepository_GetService_Call{Call: _e.mock.On("GetService", id)}
}

func (_c *DatabaseRepository_GetService_Call) Run(run func(id entities.ID)) *DatabaseRepository_GetService_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(entities.ID))
	})
	return _c
}

func (_c *DatabaseRepository_GetService_Call) Return(_a0 *entities.Service, _a1 error) *DatabaseRepository_GetService_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DatabaseRepository_GetService_Call) RunAndReturn(run func(entities.ID) (*entities.Service, error)) *DatabaseRepository_GetService_Call {
	_c.Call.Return(run)
	return _c
}

// GetServiceCategory provides a mock function with given fields: id
func (_m *DatabaseRepository) GetServiceCategory(id entities.ID) (*entities.ServiceCategory, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetServiceCategory")
	}

	var r0 *entities.ServiceCategory
	var r1 error
	if rf, ok := ret.Get(0).(func(entities.ID) (*entities.ServiceCategory, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(entities.ID) *entities.ServiceCategory); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.ServiceCategory)
		}
	}

	if rf, ok := ret.Get(1).(func(entities.ID) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DatabaseRepository_GetServiceCategory_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetServiceCategory'
type DatabaseRepository_GetServiceCategory_Call struct {
	*mock.Call
}

// GetServiceCategory is a helper method to define mock.On call
//   - id entities.ID
func (_e *DatabaseRepository_Expecter) GetServiceCategory(id interface{}) *DatabaseRepository_GetServiceCategory_Call {
	return &DatabaseRepository_GetServiceCategory_Call{Call: _e.mock.On("GetServiceCategory", id)}
}

func (_c *DatabaseRepository_GetServiceCategory_Call) Run(run func(id entities.ID)) *DatabaseRepository_GetServiceCategory_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(entities.ID))
	})
	return _c
}

func (_c *DatabaseRepository_GetServiceCategory_Call) Return(_a0 *entities.ServiceCategory, _a1 error) *DatabaseRepository_GetServiceCategory_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DatabaseRepository_GetServiceCategory_Call) RunAndReturn(run func(entities.ID) (*entities.ServiceCategory, error)) *DatabaseRepository_GetServiceCategory_Call {
	_c.Call.Return(run)
	return _c
}

// ListCategories provides a mock function with given fields:
func (_m *DatabaseRepository) ListCategories() ([]*entities.Category, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ListCategories")
	}

	var r0 []*entities.Category
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]*entities.Category, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []*entities.Category); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.Category)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DatabaseRepository_ListCategories_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListCategories'
type DatabaseRepository_ListCategories_Call struct {
	*mock.Call
}

// ListCategories is a helper method to define mock.On call
func (_e *DatabaseRepository_Expecter) ListCategories() *DatabaseRepository_ListCategories_Call {
	return &DatabaseRepository_ListCategories_Call{Call: _e.mock.On("ListCategories")}
}

func (_c *DatabaseRepository_ListCategories_Call) Run(run func()) *DatabaseRepository_ListCategories_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *DatabaseRepository_ListCategories_Call) Return(_a0 []*entities.Category, _a1 error) *DatabaseRepository_ListCategories_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DatabaseRepository_ListCategories_Call) RunAndReturn(run func() ([]*entities.Category, error)) *DatabaseRepository_ListCategories_Call {
	_c.Call.Return(run)
	return _c
}

// ListManufacturers provides a mock function with given fields:
func (_m *DatabaseRepository) ListManufacturers() ([]*entities.Manufacturer, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ListManufacturers")
	}

	var r0 []*entities.Manufacturer
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]*entities.Manufacturer, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []*entities.Manufacturer); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.Manufacturer)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DatabaseRepository_ListManufacturers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListManufacturers'
type DatabaseRepository_ListManufacturers_Call struct {
	*mock.Call
}

// ListManufacturers is a helper method to define mock.On call
func (_e *DatabaseRepository_Expecter) ListManufacturers() *DatabaseRepository_ListManufacturers_Call {
	return &DatabaseRepository_ListManufacturers_Call{Call: _e.mock.On("ListManufacturers")}
}

func (_c *DatabaseRepository_ListManufacturers_Call) Run(run func()) *DatabaseRepository_ListManufacturers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *DatabaseRepository_ListManufacturers_Call) Return(_a0 []*entities.Manufacturer, _a1 error) *DatabaseRepository_ListManufacturers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DatabaseRepository_ListManufacturers_Call) RunAndReturn(run func() ([]*entities.Manufacturer, error)) *DatabaseRepository_ListManufacturers_Call {
	_c.Call.Return(run)
	return _c
}

// ListProducts provides a mock function with given fields:
func (_m *DatabaseRepository) ListProducts() ([]*entities.Product, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ListProducts")
	}

	var r0 []*entities.Product
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]*entities.Product, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []*entities.Product); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.Product)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DatabaseRepository_ListProducts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListProducts'
type DatabaseRepository_ListProducts_Call struct {
	*mock.Call
}

// ListProducts is a helper method to define mock.On call
func (_e *DatabaseRepository_Expecter) ListProducts() *DatabaseRepository_ListProducts_Call {
	return &DatabaseRepository_ListProducts_Call{Call: _e.mock.On("ListProducts")}
}

func (_c *DatabaseRepository_ListProducts_Call) Run(run func()) *DatabaseRepository_ListProducts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *DatabaseRepository_ListProducts_Call) Return(_a0 []*entities.Product, _a1 error) *DatabaseRepository_ListProducts_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DatabaseRepository_ListProducts_Call) RunAndReturn(run func() ([]*entities.Product, error)) *DatabaseRepository_ListProducts_Call {
	_c.Call.Return(run)
	return _c
}

// ListServiceCategories provides a mock function with given fields:
func (_m *DatabaseRepository) ListServiceCategories() ([]*entities.ServiceCategory, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ListServiceCategories")
	}

	var r0 []*entities.ServiceCategory
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]*entities.ServiceCategory, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []*entities.ServiceCategory); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.ServiceCategory)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DatabaseRepository_ListServiceCategories_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListServiceCategories'
type DatabaseRepository_ListServiceCategories_Call struct {
	*mock.Call
}

// ListServiceCategories is a helper method to define mock.On call
func (_e *DatabaseRepository_Expecter) ListServiceCategories() *DatabaseRepository_ListServiceCategories_Call {
	return &DatabaseRepository_ListServiceCategories_Call{Call: _e.mock.On("ListServiceCategories")}
}

func (_c *DatabaseRepository_ListServiceCategories_Call) Run(run func()) *DatabaseRepository_ListServiceCategories_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *DatabaseRepository_ListServiceCategories_Call) Return(_a0 []*entities.ServiceCategory, _a1 error) *DatabaseRepository_ListServiceCategories_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DatabaseRepository_ListServiceCategories_Call) RunAndReturn(run func() ([]*entities.ServiceCategory, error)) *DatabaseRepository_ListServiceCategories_Call {
	_c.Call.Return(run)
	return _c
}

// ListServices provides a mock function with given fields: optionalServiceCategoryID
func (_m *DatabaseRepository) ListServices(optionalServiceCategoryID entities.ID) ([]*entities.Service, error) {
	ret := _m.Called(optionalServiceCategoryID)

	if len(ret) == 0 {
		panic("no return value specified for ListServices")
	}

	var r0 []*entities.Service
	var r1 error
	if rf, ok := ret.Get(0).(func(entities.ID) ([]*entities.Service, error)); ok {
		return rf(optionalServiceCategoryID)
	}
	if rf, ok := ret.Get(0).(func(entities.ID) []*entities.Service); ok {
		r0 = rf(optionalServiceCategoryID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.Service)
		}
	}

	if rf, ok := ret.Get(1).(func(entities.ID) error); ok {
		r1 = rf(optionalServiceCategoryID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DatabaseRepository_ListServices_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListServices'
type DatabaseRepository_ListServices_Call struct {
	*mock.Call
}

// ListServices is a helper method to define mock.On call
//   - optionalServiceCategoryID entities.ID
func (_e *DatabaseRepository_Expecter) ListServices(optionalServiceCategoryID interface{}) *DatabaseRepository_ListServices_Call {
	return &DatabaseRepository_ListServices_Call{Call: _e.mock.On("ListServices", optionalServiceCategoryID)}
}

func (_c *DatabaseRepository_ListServices_Call) Run(run func(optionalServiceCategoryID entities.ID)) *DatabaseRepository_ListServices_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(entities.ID))
	})
	return _c
}

func (_c *DatabaseRepository_ListServices_Call) Return(_a0 []*entities.Service, _a1 error) *DatabaseRepository_ListServices_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DatabaseRepository_ListServices_Call) RunAndReturn(run func(entities.ID) ([]*entities.Service, error)) *DatabaseRepository_ListServices_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateCategory provides a mock function with given fields: e
func (_m *DatabaseRepository) UpdateCategory(e *entities.Category) (*entities.Category, error) {
	ret := _m.Called(e)

	if len(ret) == 0 {
		panic("no return value specified for UpdateCategory")
	}

	var r0 *entities.Category
	var r1 error
	if rf, ok := ret.Get(0).(func(*entities.Category) (*entities.Category, error)); ok {
		return rf(e)
	}
	if rf, ok := ret.Get(0).(func(*entities.Category) *entities.Category); ok {
		r0 = rf(e)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Category)
		}
	}

	if rf, ok := ret.Get(1).(func(*entities.Category) error); ok {
		r1 = rf(e)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DatabaseRepository_UpdateCategory_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateCategory'
type DatabaseRepository_UpdateCategory_Call struct {
	*mock.Call
}

// UpdateCategory is a helper method to define mock.On call
//   - e *entities.Category
func (_e *DatabaseRepository_Expecter) UpdateCategory(e interface{}) *DatabaseRepository_UpdateCategory_Call {
	return &DatabaseRepository_UpdateCategory_Call{Call: _e.mock.On("UpdateCategory", e)}
}

func (_c *DatabaseRepository_UpdateCategory_Call) Run(run func(e *entities.Category)) *DatabaseRepository_UpdateCategory_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entities.Category))
	})
	return _c
}

func (_c *DatabaseRepository_UpdateCategory_Call) Return(_a0 *entities.Category, _a1 error) *DatabaseRepository_UpdateCategory_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DatabaseRepository_UpdateCategory_Call) RunAndReturn(run func(*entities.Category) (*entities.Category, error)) *DatabaseRepository_UpdateCategory_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateImage provides a mock function with given fields: id, ownerID, newOrder
func (_m *DatabaseRepository) UpdateImage(id entities.ID, ownerID entities.ID, newOrder int) ([]*entities.Image, error) {
	ret := _m.Called(id, ownerID, newOrder)

	if len(ret) == 0 {
		panic("no return value specified for UpdateImage")
	}

	var r0 []*entities.Image
	var r1 error
	if rf, ok := ret.Get(0).(func(entities.ID, entities.ID, int) ([]*entities.Image, error)); ok {
		return rf(id, ownerID, newOrder)
	}
	if rf, ok := ret.Get(0).(func(entities.ID, entities.ID, int) []*entities.Image); ok {
		r0 = rf(id, ownerID, newOrder)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.Image)
		}
	}

	if rf, ok := ret.Get(1).(func(entities.ID, entities.ID, int) error); ok {
		r1 = rf(id, ownerID, newOrder)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DatabaseRepository_UpdateImage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateImage'
type DatabaseRepository_UpdateImage_Call struct {
	*mock.Call
}

// UpdateImage is a helper method to define mock.On call
//   - id entities.ID
//   - ownerID entities.ID
//   - newOrder int
func (_e *DatabaseRepository_Expecter) UpdateImage(id interface{}, ownerID interface{}, newOrder interface{}) *DatabaseRepository_UpdateImage_Call {
	return &DatabaseRepository_UpdateImage_Call{Call: _e.mock.On("UpdateImage", id, ownerID, newOrder)}
}

func (_c *DatabaseRepository_UpdateImage_Call) Run(run func(id entities.ID, ownerID entities.ID, newOrder int)) *DatabaseRepository_UpdateImage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(entities.ID), args[1].(entities.ID), args[2].(int))
	})
	return _c
}

func (_c *DatabaseRepository_UpdateImage_Call) Return(_a0 []*entities.Image, _a1 error) *DatabaseRepository_UpdateImage_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DatabaseRepository_UpdateImage_Call) RunAndReturn(run func(entities.ID, entities.ID, int) ([]*entities.Image, error)) *DatabaseRepository_UpdateImage_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateManufacturer provides a mock function with given fields: e
func (_m *DatabaseRepository) UpdateManufacturer(e *entities.Manufacturer) (*entities.Manufacturer, error) {
	ret := _m.Called(e)

	if len(ret) == 0 {
		panic("no return value specified for UpdateManufacturer")
	}

	var r0 *entities.Manufacturer
	var r1 error
	if rf, ok := ret.Get(0).(func(*entities.Manufacturer) (*entities.Manufacturer, error)); ok {
		return rf(e)
	}
	if rf, ok := ret.Get(0).(func(*entities.Manufacturer) *entities.Manufacturer); ok {
		r0 = rf(e)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Manufacturer)
		}
	}

	if rf, ok := ret.Get(1).(func(*entities.Manufacturer) error); ok {
		r1 = rf(e)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DatabaseRepository_UpdateManufacturer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateManufacturer'
type DatabaseRepository_UpdateManufacturer_Call struct {
	*mock.Call
}

// UpdateManufacturer is a helper method to define mock.On call
//   - e *entities.Manufacturer
func (_e *DatabaseRepository_Expecter) UpdateManufacturer(e interface{}) *DatabaseRepository_UpdateManufacturer_Call {
	return &DatabaseRepository_UpdateManufacturer_Call{Call: _e.mock.On("UpdateManufacturer", e)}
}

func (_c *DatabaseRepository_UpdateManufacturer_Call) Run(run func(e *entities.Manufacturer)) *DatabaseRepository_UpdateManufacturer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entities.Manufacturer))
	})
	return _c
}

func (_c *DatabaseRepository_UpdateManufacturer_Call) Return(_a0 *entities.Manufacturer, _a1 error) *DatabaseRepository_UpdateManufacturer_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DatabaseRepository_UpdateManufacturer_Call) RunAndReturn(run func(*entities.Manufacturer) (*entities.Manufacturer, error)) *DatabaseRepository_UpdateManufacturer_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateProduct provides a mock function with given fields: e
func (_m *DatabaseRepository) UpdateProduct(e *entities.Product) (*entities.Product, error) {
	ret := _m.Called(e)

	if len(ret) == 0 {
		panic("no return value specified for UpdateProduct")
	}

	var r0 *entities.Product
	var r1 error
	if rf, ok := ret.Get(0).(func(*entities.Product) (*entities.Product, error)); ok {
		return rf(e)
	}
	if rf, ok := ret.Get(0).(func(*entities.Product) *entities.Product); ok {
		r0 = rf(e)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Product)
		}
	}

	if rf, ok := ret.Get(1).(func(*entities.Product) error); ok {
		r1 = rf(e)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DatabaseRepository_UpdateProduct_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateProduct'
type DatabaseRepository_UpdateProduct_Call struct {
	*mock.Call
}

// UpdateProduct is a helper method to define mock.On call
//   - e *entities.Product
func (_e *DatabaseRepository_Expecter) UpdateProduct(e interface{}) *DatabaseRepository_UpdateProduct_Call {
	return &DatabaseRepository_UpdateProduct_Call{Call: _e.mock.On("UpdateProduct", e)}
}

func (_c *DatabaseRepository_UpdateProduct_Call) Run(run func(e *entities.Product)) *DatabaseRepository_UpdateProduct_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entities.Product))
	})
	return _c
}

func (_c *DatabaseRepository_UpdateProduct_Call) Return(_a0 *entities.Product, _a1 error) *DatabaseRepository_UpdateProduct_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DatabaseRepository_UpdateProduct_Call) RunAndReturn(run func(*entities.Product) (*entities.Product, error)) *DatabaseRepository_UpdateProduct_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateProductImages provides a mock function with given fields: id, images
func (_m *DatabaseRepository) UpdateProductImages(id entities.ID, images []*entities.Image) ([]*entities.Image, error) {
	ret := _m.Called(id, images)

	if len(ret) == 0 {
		panic("no return value specified for UpdateProductImages")
	}

	var r0 []*entities.Image
	var r1 error
	if rf, ok := ret.Get(0).(func(entities.ID, []*entities.Image) ([]*entities.Image, error)); ok {
		return rf(id, images)
	}
	if rf, ok := ret.Get(0).(func(entities.ID, []*entities.Image) []*entities.Image); ok {
		r0 = rf(id, images)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.Image)
		}
	}

	if rf, ok := ret.Get(1).(func(entities.ID, []*entities.Image) error); ok {
		r1 = rf(id, images)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DatabaseRepository_UpdateProductImages_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateProductImages'
type DatabaseRepository_UpdateProductImages_Call struct {
	*mock.Call
}

// UpdateProductImages is a helper method to define mock.On call
//   - id entities.ID
//   - images []*entities.Image
func (_e *DatabaseRepository_Expecter) UpdateProductImages(id interface{}, images interface{}) *DatabaseRepository_UpdateProductImages_Call {
	return &DatabaseRepository_UpdateProductImages_Call{Call: _e.mock.On("UpdateProductImages", id, images)}
}

func (_c *DatabaseRepository_UpdateProductImages_Call) Run(run func(id entities.ID, images []*entities.Image)) *DatabaseRepository_UpdateProductImages_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(entities.ID), args[1].([]*entities.Image))
	})
	return _c
}

func (_c *DatabaseRepository_UpdateProductImages_Call) Return(_a0 []*entities.Image, _a1 error) *DatabaseRepository_UpdateProductImages_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DatabaseRepository_UpdateProductImages_Call) RunAndReturn(run func(entities.ID, []*entities.Image) ([]*entities.Image, error)) *DatabaseRepository_UpdateProductImages_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateService provides a mock function with given fields: e
func (_m *DatabaseRepository) UpdateService(e *entities.Service) (*entities.Service, error) {
	ret := _m.Called(e)

	if len(ret) == 0 {
		panic("no return value specified for UpdateService")
	}

	var r0 *entities.Service
	var r1 error
	if rf, ok := ret.Get(0).(func(*entities.Service) (*entities.Service, error)); ok {
		return rf(e)
	}
	if rf, ok := ret.Get(0).(func(*entities.Service) *entities.Service); ok {
		r0 = rf(e)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Service)
		}
	}

	if rf, ok := ret.Get(1).(func(*entities.Service) error); ok {
		r1 = rf(e)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DatabaseRepository_UpdateService_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateService'
type DatabaseRepository_UpdateService_Call struct {
	*mock.Call
}

// UpdateService is a helper method to define mock.On call
//   - e *entities.Service
func (_e *DatabaseRepository_Expecter) UpdateService(e interface{}) *DatabaseRepository_UpdateService_Call {
	return &DatabaseRepository_UpdateService_Call{Call: _e.mock.On("UpdateService", e)}
}

func (_c *DatabaseRepository_UpdateService_Call) Run(run func(e *entities.Service)) *DatabaseRepository_UpdateService_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entities.Service))
	})
	return _c
}

func (_c *DatabaseRepository_UpdateService_Call) Return(_a0 *entities.Service, _a1 error) *DatabaseRepository_UpdateService_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DatabaseRepository_UpdateService_Call) RunAndReturn(run func(*entities.Service) (*entities.Service, error)) *DatabaseRepository_UpdateService_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateServiceCategory provides a mock function with given fields: e
func (_m *DatabaseRepository) UpdateServiceCategory(e *entities.ServiceCategory) (*entities.ServiceCategory, error) {
	ret := _m.Called(e)

	if len(ret) == 0 {
		panic("no return value specified for UpdateServiceCategory")
	}

	var r0 *entities.ServiceCategory
	var r1 error
	if rf, ok := ret.Get(0).(func(*entities.ServiceCategory) (*entities.ServiceCategory, error)); ok {
		return rf(e)
	}
	if rf, ok := ret.Get(0).(func(*entities.ServiceCategory) *entities.ServiceCategory); ok {
		r0 = rf(e)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.ServiceCategory)
		}
	}

	if rf, ok := ret.Get(1).(func(*entities.ServiceCategory) error); ok {
		r1 = rf(e)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DatabaseRepository_UpdateServiceCategory_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateServiceCategory'
type DatabaseRepository_UpdateServiceCategory_Call struct {
	*mock.Call
}

// UpdateServiceCategory is a helper method to define mock.On call
//   - e *entities.ServiceCategory
func (_e *DatabaseRepository_Expecter) UpdateServiceCategory(e interface{}) *DatabaseRepository_UpdateServiceCategory_Call {
	return &DatabaseRepository_UpdateServiceCategory_Call{Call: _e.mock.On("UpdateServiceCategory", e)}
}

func (_c *DatabaseRepository_UpdateServiceCategory_Call) Run(run func(e *entities.ServiceCategory)) *DatabaseRepository_UpdateServiceCategory_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entities.ServiceCategory))
	})
	return _c
}

func (_c *DatabaseRepository_UpdateServiceCategory_Call) Return(_a0 *entities.ServiceCategory, _a1 error) *DatabaseRepository_UpdateServiceCategory_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DatabaseRepository_UpdateServiceCategory_Call) RunAndReturn(run func(*entities.ServiceCategory) (*entities.ServiceCategory, error)) *DatabaseRepository_UpdateServiceCategory_Call {
	_c.Call.Return(run)
	return _c
}

// NewDatabaseRepository creates a new instance of DatabaseRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDatabaseRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *DatabaseRepository {
	mock := &DatabaseRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
