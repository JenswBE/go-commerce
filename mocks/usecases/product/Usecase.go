// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	entities "github.com/JenswBE/go-commerce/entities"
	imageproxy "github.com/JenswBE/go-commerce/utils/imageproxy"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// Usecase is an autogenerated mock type for the Usecase type
type Usecase struct {
	mock.Mock
}

// AddProductImages provides a mock function with given fields: id, images, imageConfig
func (_m *Usecase) AddProductImages(id uuid.UUID, images map[string][]byte, imageConfig *imageproxy.ImageConfig) (*entities.Product, error) {
	ret := _m.Called(id, images, imageConfig)

	var r0 *entities.Product
	if rf, ok := ret.Get(0).(func(uuid.UUID, map[string][]byte, *imageproxy.ImageConfig) *entities.Product); ok {
		r0 = rf(id, images, imageConfig)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Product)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uuid.UUID, map[string][]byte, *imageproxy.ImageConfig) error); ok {
		r1 = rf(id, images, imageConfig)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateCategory provides a mock function with given fields: _a0
func (_m *Usecase) CreateCategory(_a0 *entities.Category) (*entities.Category, error) {
	ret := _m.Called(_a0)

	var r0 *entities.Category
	if rf, ok := ret.Get(0).(func(*entities.Category) *entities.Category); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Category)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*entities.Category) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateManufacturer provides a mock function with given fields: _a0
func (_m *Usecase) CreateManufacturer(_a0 *entities.Manufacturer) (*entities.Manufacturer, error) {
	ret := _m.Called(_a0)

	var r0 *entities.Manufacturer
	if rf, ok := ret.Get(0).(func(*entities.Manufacturer) *entities.Manufacturer); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Manufacturer)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*entities.Manufacturer) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateProduct provides a mock function with given fields: _a0
func (_m *Usecase) CreateProduct(_a0 *entities.Product) (*entities.Product, error) {
	ret := _m.Called(_a0)

	var r0 *entities.Product
	if rf, ok := ret.Get(0).(func(*entities.Product) *entities.Product); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Product)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*entities.Product) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteCategory provides a mock function with given fields: id
func (_m *Usecase) DeleteCategory(id uuid.UUID) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteCategoryImage provides a mock function with given fields: categoryID
func (_m *Usecase) DeleteCategoryImage(categoryID uuid.UUID) error {
	ret := _m.Called(categoryID)

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) error); ok {
		r0 = rf(categoryID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteManufacturer provides a mock function with given fields: id
func (_m *Usecase) DeleteManufacturer(id uuid.UUID) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteManufacturerImage provides a mock function with given fields: manufacturerID
func (_m *Usecase) DeleteManufacturerImage(manufacturerID uuid.UUID) error {
	ret := _m.Called(manufacturerID)

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) error); ok {
		r0 = rf(manufacturerID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteProduct provides a mock function with given fields: id
func (_m *Usecase) DeleteProduct(id uuid.UUID) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteProductImage provides a mock function with given fields: productID, imageID
func (_m *Usecase) DeleteProductImage(productID uuid.UUID, imageID uuid.UUID) error {
	ret := _m.Called(productID, imageID)

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID, uuid.UUID) error); ok {
		r0 = rf(productID, imageID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetCategory provides a mock function with given fields: id, imageConfig
func (_m *Usecase) GetCategory(id uuid.UUID, imageConfig *imageproxy.ImageConfig) (*entities.Category, error) {
	ret := _m.Called(id, imageConfig)

	var r0 *entities.Category
	if rf, ok := ret.Get(0).(func(uuid.UUID, *imageproxy.ImageConfig) *entities.Category); ok {
		r0 = rf(id, imageConfig)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Category)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uuid.UUID, *imageproxy.ImageConfig) error); ok {
		r1 = rf(id, imageConfig)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetManufacturer provides a mock function with given fields: id, imageConfig
func (_m *Usecase) GetManufacturer(id uuid.UUID, imageConfig *imageproxy.ImageConfig) (*entities.Manufacturer, error) {
	ret := _m.Called(id, imageConfig)

	var r0 *entities.Manufacturer
	if rf, ok := ret.Get(0).(func(uuid.UUID, *imageproxy.ImageConfig) *entities.Manufacturer); ok {
		r0 = rf(id, imageConfig)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Manufacturer)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uuid.UUID, *imageproxy.ImageConfig) error); ok {
		r1 = rf(id, imageConfig)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProduct provides a mock function with given fields: id, imageConfig
func (_m *Usecase) GetProduct(id uuid.UUID, imageConfig *imageproxy.ImageConfig) (*entities.Product, error) {
	ret := _m.Called(id, imageConfig)

	var r0 *entities.Product
	if rf, ok := ret.Get(0).(func(uuid.UUID, *imageproxy.ImageConfig) *entities.Product); ok {
		r0 = rf(id, imageConfig)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Product)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uuid.UUID, *imageproxy.ImageConfig) error); ok {
		r1 = rf(id, imageConfig)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListCategories provides a mock function with given fields: imageConfig
func (_m *Usecase) ListCategories(imageConfig *imageproxy.ImageConfig) ([]*entities.Category, error) {
	ret := _m.Called(imageConfig)

	var r0 []*entities.Category
	if rf, ok := ret.Get(0).(func(*imageproxy.ImageConfig) []*entities.Category); ok {
		r0 = rf(imageConfig)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.Category)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*imageproxy.ImageConfig) error); ok {
		r1 = rf(imageConfig)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListManufacturers provides a mock function with given fields: imageConfig
func (_m *Usecase) ListManufacturers(imageConfig *imageproxy.ImageConfig) ([]*entities.Manufacturer, error) {
	ret := _m.Called(imageConfig)

	var r0 []*entities.Manufacturer
	if rf, ok := ret.Get(0).(func(*imageproxy.ImageConfig) []*entities.Manufacturer); ok {
		r0 = rf(imageConfig)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.Manufacturer)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*imageproxy.ImageConfig) error); ok {
		r1 = rf(imageConfig)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListProducts provides a mock function with given fields: imageConfig
func (_m *Usecase) ListProducts(imageConfig *imageproxy.ImageConfig) ([]*entities.Product, error) {
	ret := _m.Called(imageConfig)

	var r0 []*entities.Product
	if rf, ok := ret.Get(0).(func(*imageproxy.ImageConfig) []*entities.Product); ok {
		r0 = rf(imageConfig)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.Product)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*imageproxy.ImageConfig) error); ok {
		r1 = rf(imageConfig)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateCategory provides a mock function with given fields: e
func (_m *Usecase) UpdateCategory(e *entities.Category) (*entities.Category, error) {
	ret := _m.Called(e)

	var r0 *entities.Category
	if rf, ok := ret.Get(0).(func(*entities.Category) *entities.Category); ok {
		r0 = rf(e)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Category)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*entities.Category) error); ok {
		r1 = rf(e)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateManufacturer provides a mock function with given fields: e
func (_m *Usecase) UpdateManufacturer(e *entities.Manufacturer) (*entities.Manufacturer, error) {
	ret := _m.Called(e)

	var r0 *entities.Manufacturer
	if rf, ok := ret.Get(0).(func(*entities.Manufacturer) *entities.Manufacturer); ok {
		r0 = rf(e)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Manufacturer)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*entities.Manufacturer) error); ok {
		r1 = rf(e)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateProduct provides a mock function with given fields: e
func (_m *Usecase) UpdateProduct(e *entities.Product) (*entities.Product, error) {
	ret := _m.Called(e)

	var r0 *entities.Product
	if rf, ok := ret.Get(0).(func(*entities.Product) *entities.Product); ok {
		r0 = rf(e)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Product)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*entities.Product) error); ok {
		r1 = rf(e)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateProductImage provides a mock function with given fields: productID, imageID, order
func (_m *Usecase) UpdateProductImage(productID uuid.UUID, imageID uuid.UUID, order int) ([]*entities.Image, error) {
	ret := _m.Called(productID, imageID, order)

	var r0 []*entities.Image
	if rf, ok := ret.Get(0).(func(uuid.UUID, uuid.UUID, int) []*entities.Image); ok {
		r0 = rf(productID, imageID, order)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.Image)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uuid.UUID, uuid.UUID, int) error); ok {
		r1 = rf(productID, imageID, order)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpsertCategoryImage provides a mock function with given fields: categoryID, imageName, imageContent, imageConfig
func (_m *Usecase) UpsertCategoryImage(categoryID uuid.UUID, imageName string, imageContent []byte, imageConfig *imageproxy.ImageConfig) (*entities.Category, error) {
	ret := _m.Called(categoryID, imageName, imageContent, imageConfig)

	var r0 *entities.Category
	if rf, ok := ret.Get(0).(func(uuid.UUID, string, []byte, *imageproxy.ImageConfig) *entities.Category); ok {
		r0 = rf(categoryID, imageName, imageContent, imageConfig)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Category)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uuid.UUID, string, []byte, *imageproxy.ImageConfig) error); ok {
		r1 = rf(categoryID, imageName, imageContent, imageConfig)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpsertManufacturerImage provides a mock function with given fields: manufacturerID, imageName, imageContent, imageConfig
func (_m *Usecase) UpsertManufacturerImage(manufacturerID uuid.UUID, imageName string, imageContent []byte, imageConfig *imageproxy.ImageConfig) (*entities.Manufacturer, error) {
	ret := _m.Called(manufacturerID, imageName, imageContent, imageConfig)

	var r0 *entities.Manufacturer
	if rf, ok := ret.Get(0).(func(uuid.UUID, string, []byte, *imageproxy.ImageConfig) *entities.Manufacturer); ok {
		r0 = rf(manufacturerID, imageName, imageContent, imageConfig)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Manufacturer)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uuid.UUID, string, []byte, *imageproxy.ImageConfig) error); ok {
		r1 = rf(manufacturerID, imageName, imageContent, imageConfig)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
