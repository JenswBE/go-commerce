// Code generated by mockery v2.39.1. DO NOT EDIT.

package product

import (
	entities "github.com/JenswBE/go-commerce/entities"
	imageproxy "github.com/JenswBE/go-commerce/utils/imageproxy"

	mock "github.com/stretchr/testify/mock"
)

// Usecase is an autogenerated mock type for the Usecase type
type Usecase struct {
	mock.Mock
}

type Usecase_Expecter struct {
	mock *mock.Mock
}

func (_m *Usecase) EXPECT() *Usecase_Expecter {
	return &Usecase_Expecter{mock: &_m.Mock}
}

// AddProductImages provides a mock function with given fields: id, images, imageConfigs
func (_m *Usecase) AddProductImages(id entities.ID, images map[string][]byte, imageConfigs map[string]imageproxy.ImageConfig) (*entities.Product, error) {
	ret := _m.Called(id, images, imageConfigs)

	if len(ret) == 0 {
		panic("no return value specified for AddProductImages")
	}

	var r0 *entities.Product
	var r1 error
	if rf, ok := ret.Get(0).(func(entities.ID, map[string][]byte, map[string]imageproxy.ImageConfig) (*entities.Product, error)); ok {
		return rf(id, images, imageConfigs)
	}
	if rf, ok := ret.Get(0).(func(entities.ID, map[string][]byte, map[string]imageproxy.ImageConfig) *entities.Product); ok {
		r0 = rf(id, images, imageConfigs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Product)
		}
	}

	if rf, ok := ret.Get(1).(func(entities.ID, map[string][]byte, map[string]imageproxy.ImageConfig) error); ok {
		r1 = rf(id, images, imageConfigs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Usecase_AddProductImages_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddProductImages'
type Usecase_AddProductImages_Call struct {
	*mock.Call
}

// AddProductImages is a helper method to define mock.On call
//   - id entities.ID
//   - images map[string][]byte
//   - imageConfigs map[string]imageproxy.ImageConfig
func (_e *Usecase_Expecter) AddProductImages(id interface{}, images interface{}, imageConfigs interface{}) *Usecase_AddProductImages_Call {
	return &Usecase_AddProductImages_Call{Call: _e.mock.On("AddProductImages", id, images, imageConfigs)}
}

func (_c *Usecase_AddProductImages_Call) Run(run func(id entities.ID, images map[string][]byte, imageConfigs map[string]imageproxy.ImageConfig)) *Usecase_AddProductImages_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(entities.ID), args[1].(map[string][]byte), args[2].(map[string]imageproxy.ImageConfig))
	})
	return _c
}

func (_c *Usecase_AddProductImages_Call) Return(_a0 *entities.Product, _a1 error) *Usecase_AddProductImages_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Usecase_AddProductImages_Call) RunAndReturn(run func(entities.ID, map[string][]byte, map[string]imageproxy.ImageConfig) (*entities.Product, error)) *Usecase_AddProductImages_Call {
	_c.Call.Return(run)
	return _c
}

// CreateCategory provides a mock function with given fields: e
func (_m *Usecase) CreateCategory(e *entities.Category) (*entities.Category, error) {
	ret := _m.Called(e)

	if len(ret) == 0 {
		panic("no return value specified for CreateCategory")
	}

	var r0 *entities.Category
	var r1 error
	if rf, ok := ret.Get(0).(func(*entities.Category) (*entities.Category, error)); ok {
		return rf(e)
	}
	if rf, ok := ret.Get(0).(func(*entities.Category) *entities.Category); ok {
		r0 = rf(e)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Category)
		}
	}

	if rf, ok := ret.Get(1).(func(*entities.Category) error); ok {
		r1 = rf(e)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Usecase_CreateCategory_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateCategory'
type Usecase_CreateCategory_Call struct {
	*mock.Call
}

// CreateCategory is a helper method to define mock.On call
//   - e *entities.Category
func (_e *Usecase_Expecter) CreateCategory(e interface{}) *Usecase_CreateCategory_Call {
	return &Usecase_CreateCategory_Call{Call: _e.mock.On("CreateCategory", e)}
}

func (_c *Usecase_CreateCategory_Call) Run(run func(e *entities.Category)) *Usecase_CreateCategory_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entities.Category))
	})
	return _c
}

func (_c *Usecase_CreateCategory_Call) Return(_a0 *entities.Category, _a1 error) *Usecase_CreateCategory_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Usecase_CreateCategory_Call) RunAndReturn(run func(*entities.Category) (*entities.Category, error)) *Usecase_CreateCategory_Call {
	_c.Call.Return(run)
	return _c
}

// CreateManufacturer provides a mock function with given fields: e
func (_m *Usecase) CreateManufacturer(e *entities.Manufacturer) (*entities.Manufacturer, error) {
	ret := _m.Called(e)

	if len(ret) == 0 {
		panic("no return value specified for CreateManufacturer")
	}

	var r0 *entities.Manufacturer
	var r1 error
	if rf, ok := ret.Get(0).(func(*entities.Manufacturer) (*entities.Manufacturer, error)); ok {
		return rf(e)
	}
	if rf, ok := ret.Get(0).(func(*entities.Manufacturer) *entities.Manufacturer); ok {
		r0 = rf(e)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Manufacturer)
		}
	}

	if rf, ok := ret.Get(1).(func(*entities.Manufacturer) error); ok {
		r1 = rf(e)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Usecase_CreateManufacturer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateManufacturer'
type Usecase_CreateManufacturer_Call struct {
	*mock.Call
}

// CreateManufacturer is a helper method to define mock.On call
//   - e *entities.Manufacturer
func (_e *Usecase_Expecter) CreateManufacturer(e interface{}) *Usecase_CreateManufacturer_Call {
	return &Usecase_CreateManufacturer_Call{Call: _e.mock.On("CreateManufacturer", e)}
}

func (_c *Usecase_CreateManufacturer_Call) Run(run func(e *entities.Manufacturer)) *Usecase_CreateManufacturer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entities.Manufacturer))
	})
	return _c
}

func (_c *Usecase_CreateManufacturer_Call) Return(_a0 *entities.Manufacturer, _a1 error) *Usecase_CreateManufacturer_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Usecase_CreateManufacturer_Call) RunAndReturn(run func(*entities.Manufacturer) (*entities.Manufacturer, error)) *Usecase_CreateManufacturer_Call {
	_c.Call.Return(run)
	return _c
}

// CreateProduct provides a mock function with given fields: e
func (_m *Usecase) CreateProduct(e *entities.Product) (*entities.Product, error) {
	ret := _m.Called(e)

	if len(ret) == 0 {
		panic("no return value specified for CreateProduct")
	}

	var r0 *entities.Product
	var r1 error
	if rf, ok := ret.Get(0).(func(*entities.Product) (*entities.Product, error)); ok {
		return rf(e)
	}
	if rf, ok := ret.Get(0).(func(*entities.Product) *entities.Product); ok {
		r0 = rf(e)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Product)
		}
	}

	if rf, ok := ret.Get(1).(func(*entities.Product) error); ok {
		r1 = rf(e)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Usecase_CreateProduct_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateProduct'
type Usecase_CreateProduct_Call struct {
	*mock.Call
}

// CreateProduct is a helper method to define mock.On call
//   - e *entities.Product
func (_e *Usecase_Expecter) CreateProduct(e interface{}) *Usecase_CreateProduct_Call {
	return &Usecase_CreateProduct_Call{Call: _e.mock.On("CreateProduct", e)}
}

func (_c *Usecase_CreateProduct_Call) Run(run func(e *entities.Product)) *Usecase_CreateProduct_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entities.Product))
	})
	return _c
}

func (_c *Usecase_CreateProduct_Call) Return(_a0 *entities.Product, _a1 error) *Usecase_CreateProduct_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Usecase_CreateProduct_Call) RunAndReturn(run func(*entities.Product) (*entities.Product, error)) *Usecase_CreateProduct_Call {
	_c.Call.Return(run)
	return _c
}

// CreateService provides a mock function with given fields: e
func (_m *Usecase) CreateService(e *entities.Service) (*entities.Service, error) {
	ret := _m.Called(e)

	if len(ret) == 0 {
		panic("no return value specified for CreateService")
	}

	var r0 *entities.Service
	var r1 error
	if rf, ok := ret.Get(0).(func(*entities.Service) (*entities.Service, error)); ok {
		return rf(e)
	}
	if rf, ok := ret.Get(0).(func(*entities.Service) *entities.Service); ok {
		r0 = rf(e)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Service)
		}
	}

	if rf, ok := ret.Get(1).(func(*entities.Service) error); ok {
		r1 = rf(e)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Usecase_CreateService_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateService'
type Usecase_CreateService_Call struct {
	*mock.Call
}

// CreateService is a helper method to define mock.On call
//   - e *entities.Service
func (_e *Usecase_Expecter) CreateService(e interface{}) *Usecase_CreateService_Call {
	return &Usecase_CreateService_Call{Call: _e.mock.On("CreateService", e)}
}

func (_c *Usecase_CreateService_Call) Run(run func(e *entities.Service)) *Usecase_CreateService_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entities.Service))
	})
	return _c
}

func (_c *Usecase_CreateService_Call) Return(_a0 *entities.Service, _a1 error) *Usecase_CreateService_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Usecase_CreateService_Call) RunAndReturn(run func(*entities.Service) (*entities.Service, error)) *Usecase_CreateService_Call {
	_c.Call.Return(run)
	return _c
}

// CreateServiceCategory provides a mock function with given fields: e
func (_m *Usecase) CreateServiceCategory(e *entities.ServiceCategory) (*entities.ServiceCategory, error) {
	ret := _m.Called(e)

	if len(ret) == 0 {
		panic("no return value specified for CreateServiceCategory")
	}

	var r0 *entities.ServiceCategory
	var r1 error
	if rf, ok := ret.Get(0).(func(*entities.ServiceCategory) (*entities.ServiceCategory, error)); ok {
		return rf(e)
	}
	if rf, ok := ret.Get(0).(func(*entities.ServiceCategory) *entities.ServiceCategory); ok {
		r0 = rf(e)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.ServiceCategory)
		}
	}

	if rf, ok := ret.Get(1).(func(*entities.ServiceCategory) error); ok {
		r1 = rf(e)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Usecase_CreateServiceCategory_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateServiceCategory'
type Usecase_CreateServiceCategory_Call struct {
	*mock.Call
}

// CreateServiceCategory is a helper method to define mock.On call
//   - e *entities.ServiceCategory
func (_e *Usecase_Expecter) CreateServiceCategory(e interface{}) *Usecase_CreateServiceCategory_Call {
	return &Usecase_CreateServiceCategory_Call{Call: _e.mock.On("CreateServiceCategory", e)}
}

func (_c *Usecase_CreateServiceCategory_Call) Run(run func(e *entities.ServiceCategory)) *Usecase_CreateServiceCategory_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entities.ServiceCategory))
	})
	return _c
}

func (_c *Usecase_CreateServiceCategory_Call) Return(_a0 *entities.ServiceCategory, _a1 error) *Usecase_CreateServiceCategory_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Usecase_CreateServiceCategory_Call) RunAndReturn(run func(*entities.ServiceCategory) (*entities.ServiceCategory, error)) *Usecase_CreateServiceCategory_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteCategory provides a mock function with given fields: id
func (_m *Usecase) DeleteCategory(id entities.ID) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteCategory")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(entities.ID) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Usecase_DeleteCategory_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteCategory'
type Usecase_DeleteCategory_Call struct {
	*mock.Call
}

// DeleteCategory is a helper method to define mock.On call
//   - id entities.ID
func (_e *Usecase_Expecter) DeleteCategory(id interface{}) *Usecase_DeleteCategory_Call {
	return &Usecase_DeleteCategory_Call{Call: _e.mock.On("DeleteCategory", id)}
}

func (_c *Usecase_DeleteCategory_Call) Run(run func(id entities.ID)) *Usecase_DeleteCategory_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(entities.ID))
	})
	return _c
}

func (_c *Usecase_DeleteCategory_Call) Return(_a0 error) *Usecase_DeleteCategory_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Usecase_DeleteCategory_Call) RunAndReturn(run func(entities.ID) error) *Usecase_DeleteCategory_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteCategoryImage provides a mock function with given fields: categoryID
func (_m *Usecase) DeleteCategoryImage(categoryID entities.ID) error {
	ret := _m.Called(categoryID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteCategoryImage")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(entities.ID) error); ok {
		r0 = rf(categoryID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Usecase_DeleteCategoryImage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteCategoryImage'
type Usecase_DeleteCategoryImage_Call struct {
	*mock.Call
}

// DeleteCategoryImage is a helper method to define mock.On call
//   - categoryID entities.ID
func (_e *Usecase_Expecter) DeleteCategoryImage(categoryID interface{}) *Usecase_DeleteCategoryImage_Call {
	return &Usecase_DeleteCategoryImage_Call{Call: _e.mock.On("DeleteCategoryImage", categoryID)}
}

func (_c *Usecase_DeleteCategoryImage_Call) Run(run func(categoryID entities.ID)) *Usecase_DeleteCategoryImage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(entities.ID))
	})
	return _c
}

func (_c *Usecase_DeleteCategoryImage_Call) Return(_a0 error) *Usecase_DeleteCategoryImage_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Usecase_DeleteCategoryImage_Call) RunAndReturn(run func(entities.ID) error) *Usecase_DeleteCategoryImage_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteManufacturer provides a mock function with given fields: id
func (_m *Usecase) DeleteManufacturer(id entities.ID) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteManufacturer")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(entities.ID) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Usecase_DeleteManufacturer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteManufacturer'
type Usecase_DeleteManufacturer_Call struct {
	*mock.Call
}

// DeleteManufacturer is a helper method to define mock.On call
//   - id entities.ID
func (_e *Usecase_Expecter) DeleteManufacturer(id interface{}) *Usecase_DeleteManufacturer_Call {
	return &Usecase_DeleteManufacturer_Call{Call: _e.mock.On("DeleteManufacturer", id)}
}

func (_c *Usecase_DeleteManufacturer_Call) Run(run func(id entities.ID)) *Usecase_DeleteManufacturer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(entities.ID))
	})
	return _c
}

func (_c *Usecase_DeleteManufacturer_Call) Return(_a0 error) *Usecase_DeleteManufacturer_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Usecase_DeleteManufacturer_Call) RunAndReturn(run func(entities.ID) error) *Usecase_DeleteManufacturer_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteManufacturerImage provides a mock function with given fields: manufacturerID
func (_m *Usecase) DeleteManufacturerImage(manufacturerID entities.ID) error {
	ret := _m.Called(manufacturerID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteManufacturerImage")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(entities.ID) error); ok {
		r0 = rf(manufacturerID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Usecase_DeleteManufacturerImage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteManufacturerImage'
type Usecase_DeleteManufacturerImage_Call struct {
	*mock.Call
}

// DeleteManufacturerImage is a helper method to define mock.On call
//   - manufacturerID entities.ID
func (_e *Usecase_Expecter) DeleteManufacturerImage(manufacturerID interface{}) *Usecase_DeleteManufacturerImage_Call {
	return &Usecase_DeleteManufacturerImage_Call{Call: _e.mock.On("DeleteManufacturerImage", manufacturerID)}
}

func (_c *Usecase_DeleteManufacturerImage_Call) Run(run func(manufacturerID entities.ID)) *Usecase_DeleteManufacturerImage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(entities.ID))
	})
	return _c
}

func (_c *Usecase_DeleteManufacturerImage_Call) Return(_a0 error) *Usecase_DeleteManufacturerImage_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Usecase_DeleteManufacturerImage_Call) RunAndReturn(run func(entities.ID) error) *Usecase_DeleteManufacturerImage_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteProduct provides a mock function with given fields: id
func (_m *Usecase) DeleteProduct(id entities.ID) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteProduct")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(entities.ID) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Usecase_DeleteProduct_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteProduct'
type Usecase_DeleteProduct_Call struct {
	*mock.Call
}

// DeleteProduct is a helper method to define mock.On call
//   - id entities.ID
func (_e *Usecase_Expecter) DeleteProduct(id interface{}) *Usecase_DeleteProduct_Call {
	return &Usecase_DeleteProduct_Call{Call: _e.mock.On("DeleteProduct", id)}
}

func (_c *Usecase_DeleteProduct_Call) Run(run func(id entities.ID)) *Usecase_DeleteProduct_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(entities.ID))
	})
	return _c
}

func (_c *Usecase_DeleteProduct_Call) Return(_a0 error) *Usecase_DeleteProduct_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Usecase_DeleteProduct_Call) RunAndReturn(run func(entities.ID) error) *Usecase_DeleteProduct_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteProductImage provides a mock function with given fields: productID, imageID
func (_m *Usecase) DeleteProductImage(productID entities.ID, imageID entities.ID) error {
	ret := _m.Called(productID, imageID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteProductImage")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(entities.ID, entities.ID) error); ok {
		r0 = rf(productID, imageID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Usecase_DeleteProductImage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteProductImage'
type Usecase_DeleteProductImage_Call struct {
	*mock.Call
}

// DeleteProductImage is a helper method to define mock.On call
//   - productID entities.ID
//   - imageID entities.ID
func (_e *Usecase_Expecter) DeleteProductImage(productID interface{}, imageID interface{}) *Usecase_DeleteProductImage_Call {
	return &Usecase_DeleteProductImage_Call{Call: _e.mock.On("DeleteProductImage", productID, imageID)}
}

func (_c *Usecase_DeleteProductImage_Call) Run(run func(productID entities.ID, imageID entities.ID)) *Usecase_DeleteProductImage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(entities.ID), args[1].(entities.ID))
	})
	return _c
}

func (_c *Usecase_DeleteProductImage_Call) Return(_a0 error) *Usecase_DeleteProductImage_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Usecase_DeleteProductImage_Call) RunAndReturn(run func(entities.ID, entities.ID) error) *Usecase_DeleteProductImage_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteService provides a mock function with given fields: id
func (_m *Usecase) DeleteService(id entities.ID) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteService")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(entities.ID) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Usecase_DeleteService_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteService'
type Usecase_DeleteService_Call struct {
	*mock.Call
}

// DeleteService is a helper method to define mock.On call
//   - id entities.ID
func (_e *Usecase_Expecter) DeleteService(id interface{}) *Usecase_DeleteService_Call {
	return &Usecase_DeleteService_Call{Call: _e.mock.On("DeleteService", id)}
}

func (_c *Usecase_DeleteService_Call) Run(run func(id entities.ID)) *Usecase_DeleteService_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(entities.ID))
	})
	return _c
}

func (_c *Usecase_DeleteService_Call) Return(_a0 error) *Usecase_DeleteService_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Usecase_DeleteService_Call) RunAndReturn(run func(entities.ID) error) *Usecase_DeleteService_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteServiceCategory provides a mock function with given fields: id
func (_m *Usecase) DeleteServiceCategory(id entities.ID) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteServiceCategory")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(entities.ID) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Usecase_DeleteServiceCategory_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteServiceCategory'
type Usecase_DeleteServiceCategory_Call struct {
	*mock.Call
}

// DeleteServiceCategory is a helper method to define mock.On call
//   - id entities.ID
func (_e *Usecase_Expecter) DeleteServiceCategory(id interface{}) *Usecase_DeleteServiceCategory_Call {
	return &Usecase_DeleteServiceCategory_Call{Call: _e.mock.On("DeleteServiceCategory", id)}
}

func (_c *Usecase_DeleteServiceCategory_Call) Run(run func(id entities.ID)) *Usecase_DeleteServiceCategory_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(entities.ID))
	})
	return _c
}

func (_c *Usecase_DeleteServiceCategory_Call) Return(_a0 error) *Usecase_DeleteServiceCategory_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Usecase_DeleteServiceCategory_Call) RunAndReturn(run func(entities.ID) error) *Usecase_DeleteServiceCategory_Call {
	_c.Call.Return(run)
	return _c
}

// GetCategory provides a mock function with given fields: id, imageConfigs
func (_m *Usecase) GetCategory(id entities.ID, imageConfigs map[string]imageproxy.ImageConfig) (*entities.Category, error) {
	ret := _m.Called(id, imageConfigs)

	if len(ret) == 0 {
		panic("no return value specified for GetCategory")
	}

	var r0 *entities.Category
	var r1 error
	if rf, ok := ret.Get(0).(func(entities.ID, map[string]imageproxy.ImageConfig) (*entities.Category, error)); ok {
		return rf(id, imageConfigs)
	}
	if rf, ok := ret.Get(0).(func(entities.ID, map[string]imageproxy.ImageConfig) *entities.Category); ok {
		r0 = rf(id, imageConfigs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Category)
		}
	}

	if rf, ok := ret.Get(1).(func(entities.ID, map[string]imageproxy.ImageConfig) error); ok {
		r1 = rf(id, imageConfigs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Usecase_GetCategory_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCategory'
type Usecase_GetCategory_Call struct {
	*mock.Call
}

// GetCategory is a helper method to define mock.On call
//   - id entities.ID
//   - imageConfigs map[string]imageproxy.ImageConfig
func (_e *Usecase_Expecter) GetCategory(id interface{}, imageConfigs interface{}) *Usecase_GetCategory_Call {
	return &Usecase_GetCategory_Call{Call: _e.mock.On("GetCategory", id, imageConfigs)}
}

func (_c *Usecase_GetCategory_Call) Run(run func(id entities.ID, imageConfigs map[string]imageproxy.ImageConfig)) *Usecase_GetCategory_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(entities.ID), args[1].(map[string]imageproxy.ImageConfig))
	})
	return _c
}

func (_c *Usecase_GetCategory_Call) Return(_a0 *entities.Category, _a1 error) *Usecase_GetCategory_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Usecase_GetCategory_Call) RunAndReturn(run func(entities.ID, map[string]imageproxy.ImageConfig) (*entities.Category, error)) *Usecase_GetCategory_Call {
	_c.Call.Return(run)
	return _c
}

// GetManufacturer provides a mock function with given fields: id, imageConfigs
func (_m *Usecase) GetManufacturer(id entities.ID, imageConfigs map[string]imageproxy.ImageConfig) (*entities.Manufacturer, error) {
	ret := _m.Called(id, imageConfigs)

	if len(ret) == 0 {
		panic("no return value specified for GetManufacturer")
	}

	var r0 *entities.Manufacturer
	var r1 error
	if rf, ok := ret.Get(0).(func(entities.ID, map[string]imageproxy.ImageConfig) (*entities.Manufacturer, error)); ok {
		return rf(id, imageConfigs)
	}
	if rf, ok := ret.Get(0).(func(entities.ID, map[string]imageproxy.ImageConfig) *entities.Manufacturer); ok {
		r0 = rf(id, imageConfigs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Manufacturer)
		}
	}

	if rf, ok := ret.Get(1).(func(entities.ID, map[string]imageproxy.ImageConfig) error); ok {
		r1 = rf(id, imageConfigs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Usecase_GetManufacturer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetManufacturer'
type Usecase_GetManufacturer_Call struct {
	*mock.Call
}

// GetManufacturer is a helper method to define mock.On call
//   - id entities.ID
//   - imageConfigs map[string]imageproxy.ImageConfig
func (_e *Usecase_Expecter) GetManufacturer(id interface{}, imageConfigs interface{}) *Usecase_GetManufacturer_Call {
	return &Usecase_GetManufacturer_Call{Call: _e.mock.On("GetManufacturer", id, imageConfigs)}
}

func (_c *Usecase_GetManufacturer_Call) Run(run func(id entities.ID, imageConfigs map[string]imageproxy.ImageConfig)) *Usecase_GetManufacturer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(entities.ID), args[1].(map[string]imageproxy.ImageConfig))
	})
	return _c
}

func (_c *Usecase_GetManufacturer_Call) Return(_a0 *entities.Manufacturer, _a1 error) *Usecase_GetManufacturer_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Usecase_GetManufacturer_Call) RunAndReturn(run func(entities.ID, map[string]imageproxy.ImageConfig) (*entities.Manufacturer, error)) *Usecase_GetManufacturer_Call {
	_c.Call.Return(run)
	return _c
}

// GetProduct provides a mock function with given fields: id, resolved, imageConfigs
func (_m *Usecase) GetProduct(id entities.ID, resolved bool, imageConfigs map[string]imageproxy.ImageConfig) (*entities.ResolvedProduct, error) {
	ret := _m.Called(id, resolved, imageConfigs)

	if len(ret) == 0 {
		panic("no return value specified for GetProduct")
	}

	var r0 *entities.ResolvedProduct
	var r1 error
	if rf, ok := ret.Get(0).(func(entities.ID, bool, map[string]imageproxy.ImageConfig) (*entities.ResolvedProduct, error)); ok {
		return rf(id, resolved, imageConfigs)
	}
	if rf, ok := ret.Get(0).(func(entities.ID, bool, map[string]imageproxy.ImageConfig) *entities.ResolvedProduct); ok {
		r0 = rf(id, resolved, imageConfigs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.ResolvedProduct)
		}
	}

	if rf, ok := ret.Get(1).(func(entities.ID, bool, map[string]imageproxy.ImageConfig) error); ok {
		r1 = rf(id, resolved, imageConfigs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Usecase_GetProduct_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProduct'
type Usecase_GetProduct_Call struct {
	*mock.Call
}

// GetProduct is a helper method to define mock.On call
//   - id entities.ID
//   - resolved bool
//   - imageConfigs map[string]imageproxy.ImageConfig
func (_e *Usecase_Expecter) GetProduct(id interface{}, resolved interface{}, imageConfigs interface{}) *Usecase_GetProduct_Call {
	return &Usecase_GetProduct_Call{Call: _e.mock.On("GetProduct", id, resolved, imageConfigs)}
}

func (_c *Usecase_GetProduct_Call) Run(run func(id entities.ID, resolved bool, imageConfigs map[string]imageproxy.ImageConfig)) *Usecase_GetProduct_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(entities.ID), args[1].(bool), args[2].(map[string]imageproxy.ImageConfig))
	})
	return _c
}

func (_c *Usecase_GetProduct_Call) Return(_a0 *entities.ResolvedProduct, _a1 error) *Usecase_GetProduct_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Usecase_GetProduct_Call) RunAndReturn(run func(entities.ID, bool, map[string]imageproxy.ImageConfig) (*entities.ResolvedProduct, error)) *Usecase_GetProduct_Call {
	_c.Call.Return(run)
	return _c
}

// GetService provides a mock function with given fields: id
func (_m *Usecase) GetService(id entities.ID) (*entities.Service, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetService")
	}

	var r0 *entities.Service
	var r1 error
	if rf, ok := ret.Get(0).(func(entities.ID) (*entities.Service, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(entities.ID) *entities.Service); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Service)
		}
	}

	if rf, ok := ret.Get(1).(func(entities.ID) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Usecase_GetService_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetService'
type Usecase_GetService_Call struct {
	*mock.Call
}

// GetService is a helper method to define mock.On call
//   - id entities.ID
func (_e *Usecase_Expecter) GetService(id interface{}) *Usecase_GetService_Call {
	return &Usecase_GetService_Call{Call: _e.mock.On("GetService", id)}
}

func (_c *Usecase_GetService_Call) Run(run func(id entities.ID)) *Usecase_GetService_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(entities.ID))
	})
	return _c
}

func (_c *Usecase_GetService_Call) Return(_a0 *entities.Service, _a1 error) *Usecase_GetService_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Usecase_GetService_Call) RunAndReturn(run func(entities.ID) (*entities.Service, error)) *Usecase_GetService_Call {
	_c.Call.Return(run)
	return _c
}

// GetServiceCategory provides a mock function with given fields: id, resolved
func (_m *Usecase) GetServiceCategory(id entities.ID, resolved bool) (*entities.ResolvedServiceCategory, error) {
	ret := _m.Called(id, resolved)

	if len(ret) == 0 {
		panic("no return value specified for GetServiceCategory")
	}

	var r0 *entities.ResolvedServiceCategory
	var r1 error
	if rf, ok := ret.Get(0).(func(entities.ID, bool) (*entities.ResolvedServiceCategory, error)); ok {
		return rf(id, resolved)
	}
	if rf, ok := ret.Get(0).(func(entities.ID, bool) *entities.ResolvedServiceCategory); ok {
		r0 = rf(id, resolved)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.ResolvedServiceCategory)
		}
	}

	if rf, ok := ret.Get(1).(func(entities.ID, bool) error); ok {
		r1 = rf(id, resolved)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Usecase_GetServiceCategory_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetServiceCategory'
type Usecase_GetServiceCategory_Call struct {
	*mock.Call
}

// GetServiceCategory is a helper method to define mock.On call
//   - id entities.ID
//   - resolved bool
func (_e *Usecase_Expecter) GetServiceCategory(id interface{}, resolved interface{}) *Usecase_GetServiceCategory_Call {
	return &Usecase_GetServiceCategory_Call{Call: _e.mock.On("GetServiceCategory", id, resolved)}
}

func (_c *Usecase_GetServiceCategory_Call) Run(run func(id entities.ID, resolved bool)) *Usecase_GetServiceCategory_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(entities.ID), args[1].(bool))
	})
	return _c
}

func (_c *Usecase_GetServiceCategory_Call) Return(_a0 *entities.ResolvedServiceCategory, _a1 error) *Usecase_GetServiceCategory_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Usecase_GetServiceCategory_Call) RunAndReturn(run func(entities.ID, bool) (*entities.ResolvedServiceCategory, error)) *Usecase_GetServiceCategory_Call {
	_c.Call.Return(run)
	return _c
}

// ListCategories provides a mock function with given fields: imageConfigs
func (_m *Usecase) ListCategories(imageConfigs map[string]imageproxy.ImageConfig) ([]*entities.Category, error) {
	ret := _m.Called(imageConfigs)

	if len(ret) == 0 {
		panic("no return value specified for ListCategories")
	}

	var r0 []*entities.Category
	var r1 error
	if rf, ok := ret.Get(0).(func(map[string]imageproxy.ImageConfig) ([]*entities.Category, error)); ok {
		return rf(imageConfigs)
	}
	if rf, ok := ret.Get(0).(func(map[string]imageproxy.ImageConfig) []*entities.Category); ok {
		r0 = rf(imageConfigs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.Category)
		}
	}

	if rf, ok := ret.Get(1).(func(map[string]imageproxy.ImageConfig) error); ok {
		r1 = rf(imageConfigs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Usecase_ListCategories_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListCategories'
type Usecase_ListCategories_Call struct {
	*mock.Call
}

// ListCategories is a helper method to define mock.On call
//   - imageConfigs map[string]imageproxy.ImageConfig
func (_e *Usecase_Expecter) ListCategories(imageConfigs interface{}) *Usecase_ListCategories_Call {
	return &Usecase_ListCategories_Call{Call: _e.mock.On("ListCategories", imageConfigs)}
}

func (_c *Usecase_ListCategories_Call) Run(run func(imageConfigs map[string]imageproxy.ImageConfig)) *Usecase_ListCategories_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(map[string]imageproxy.ImageConfig))
	})
	return _c
}

func (_c *Usecase_ListCategories_Call) Return(_a0 []*entities.Category, _a1 error) *Usecase_ListCategories_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Usecase_ListCategories_Call) RunAndReturn(run func(map[string]imageproxy.ImageConfig) ([]*entities.Category, error)) *Usecase_ListCategories_Call {
	_c.Call.Return(run)
	return _c
}

// ListManufacturers provides a mock function with given fields: imageConfigs
func (_m *Usecase) ListManufacturers(imageConfigs map[string]imageproxy.ImageConfig) ([]*entities.Manufacturer, error) {
	ret := _m.Called(imageConfigs)

	if len(ret) == 0 {
		panic("no return value specified for ListManufacturers")
	}

	var r0 []*entities.Manufacturer
	var r1 error
	if rf, ok := ret.Get(0).(func(map[string]imageproxy.ImageConfig) ([]*entities.Manufacturer, error)); ok {
		return rf(imageConfigs)
	}
	if rf, ok := ret.Get(0).(func(map[string]imageproxy.ImageConfig) []*entities.Manufacturer); ok {
		r0 = rf(imageConfigs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.Manufacturer)
		}
	}

	if rf, ok := ret.Get(1).(func(map[string]imageproxy.ImageConfig) error); ok {
		r1 = rf(imageConfigs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Usecase_ListManufacturers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListManufacturers'
type Usecase_ListManufacturers_Call struct {
	*mock.Call
}

// ListManufacturers is a helper method to define mock.On call
//   - imageConfigs map[string]imageproxy.ImageConfig
func (_e *Usecase_Expecter) ListManufacturers(imageConfigs interface{}) *Usecase_ListManufacturers_Call {
	return &Usecase_ListManufacturers_Call{Call: _e.mock.On("ListManufacturers", imageConfigs)}
}

func (_c *Usecase_ListManufacturers_Call) Run(run func(imageConfigs map[string]imageproxy.ImageConfig)) *Usecase_ListManufacturers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(map[string]imageproxy.ImageConfig))
	})
	return _c
}

func (_c *Usecase_ListManufacturers_Call) Return(_a0 []*entities.Manufacturer, _a1 error) *Usecase_ListManufacturers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Usecase_ListManufacturers_Call) RunAndReturn(run func(map[string]imageproxy.ImageConfig) ([]*entities.Manufacturer, error)) *Usecase_ListManufacturers_Call {
	_c.Call.Return(run)
	return _c
}

// ListProducts provides a mock function with given fields: imageConfigs
func (_m *Usecase) ListProducts(imageConfigs map[string]imageproxy.ImageConfig) ([]*entities.Product, error) {
	ret := _m.Called(imageConfigs)

	if len(ret) == 0 {
		panic("no return value specified for ListProducts")
	}

	var r0 []*entities.Product
	var r1 error
	if rf, ok := ret.Get(0).(func(map[string]imageproxy.ImageConfig) ([]*entities.Product, error)); ok {
		return rf(imageConfigs)
	}
	if rf, ok := ret.Get(0).(func(map[string]imageproxy.ImageConfig) []*entities.Product); ok {
		r0 = rf(imageConfigs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.Product)
		}
	}

	if rf, ok := ret.Get(1).(func(map[string]imageproxy.ImageConfig) error); ok {
		r1 = rf(imageConfigs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Usecase_ListProducts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListProducts'
type Usecase_ListProducts_Call struct {
	*mock.Call
}

// ListProducts is a helper method to define mock.On call
//   - imageConfigs map[string]imageproxy.ImageConfig
func (_e *Usecase_Expecter) ListProducts(imageConfigs interface{}) *Usecase_ListProducts_Call {
	return &Usecase_ListProducts_Call{Call: _e.mock.On("ListProducts", imageConfigs)}
}

func (_c *Usecase_ListProducts_Call) Run(run func(imageConfigs map[string]imageproxy.ImageConfig)) *Usecase_ListProducts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(map[string]imageproxy.ImageConfig))
	})
	return _c
}

func (_c *Usecase_ListProducts_Call) Return(_a0 []*entities.Product, _a1 error) *Usecase_ListProducts_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Usecase_ListProducts_Call) RunAndReturn(run func(map[string]imageproxy.ImageConfig) ([]*entities.Product, error)) *Usecase_ListProducts_Call {
	_c.Call.Return(run)
	return _c
}

// ListServiceCategories provides a mock function with given fields: resolved
func (_m *Usecase) ListServiceCategories(resolved bool) ([]*entities.ResolvedServiceCategory, error) {
	ret := _m.Called(resolved)

	if len(ret) == 0 {
		panic("no return value specified for ListServiceCategories")
	}

	var r0 []*entities.ResolvedServiceCategory
	var r1 error
	if rf, ok := ret.Get(0).(func(bool) ([]*entities.ResolvedServiceCategory, error)); ok {
		return rf(resolved)
	}
	if rf, ok := ret.Get(0).(func(bool) []*entities.ResolvedServiceCategory); ok {
		r0 = rf(resolved)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.ResolvedServiceCategory)
		}
	}

	if rf, ok := ret.Get(1).(func(bool) error); ok {
		r1 = rf(resolved)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Usecase_ListServiceCategories_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListServiceCategories'
type Usecase_ListServiceCategories_Call struct {
	*mock.Call
}

// ListServiceCategories is a helper method to define mock.On call
//   - resolved bool
func (_e *Usecase_Expecter) ListServiceCategories(resolved interface{}) *Usecase_ListServiceCategories_Call {
	return &Usecase_ListServiceCategories_Call{Call: _e.mock.On("ListServiceCategories", resolved)}
}

func (_c *Usecase_ListServiceCategories_Call) Run(run func(resolved bool)) *Usecase_ListServiceCategories_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(bool))
	})
	return _c
}

func (_c *Usecase_ListServiceCategories_Call) Return(_a0 []*entities.ResolvedServiceCategory, _a1 error) *Usecase_ListServiceCategories_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Usecase_ListServiceCategories_Call) RunAndReturn(run func(bool) ([]*entities.ResolvedServiceCategory, error)) *Usecase_ListServiceCategories_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateCategory provides a mock function with given fields: e
func (_m *Usecase) UpdateCategory(e *entities.Category) (*entities.Category, error) {
	ret := _m.Called(e)

	if len(ret) == 0 {
		panic("no return value specified for UpdateCategory")
	}

	var r0 *entities.Category
	var r1 error
	if rf, ok := ret.Get(0).(func(*entities.Category) (*entities.Category, error)); ok {
		return rf(e)
	}
	if rf, ok := ret.Get(0).(func(*entities.Category) *entities.Category); ok {
		r0 = rf(e)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Category)
		}
	}

	if rf, ok := ret.Get(1).(func(*entities.Category) error); ok {
		r1 = rf(e)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Usecase_UpdateCategory_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateCategory'
type Usecase_UpdateCategory_Call struct {
	*mock.Call
}

// UpdateCategory is a helper method to define mock.On call
//   - e *entities.Category
func (_e *Usecase_Expecter) UpdateCategory(e interface{}) *Usecase_UpdateCategory_Call {
	return &Usecase_UpdateCategory_Call{Call: _e.mock.On("UpdateCategory", e)}
}

func (_c *Usecase_UpdateCategory_Call) Run(run func(e *entities.Category)) *Usecase_UpdateCategory_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entities.Category))
	})
	return _c
}

func (_c *Usecase_UpdateCategory_Call) Return(_a0 *entities.Category, _a1 error) *Usecase_UpdateCategory_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Usecase_UpdateCategory_Call) RunAndReturn(run func(*entities.Category) (*entities.Category, error)) *Usecase_UpdateCategory_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateManufacturer provides a mock function with given fields: e
func (_m *Usecase) UpdateManufacturer(e *entities.Manufacturer) (*entities.Manufacturer, error) {
	ret := _m.Called(e)

	if len(ret) == 0 {
		panic("no return value specified for UpdateManufacturer")
	}

	var r0 *entities.Manufacturer
	var r1 error
	if rf, ok := ret.Get(0).(func(*entities.Manufacturer) (*entities.Manufacturer, error)); ok {
		return rf(e)
	}
	if rf, ok := ret.Get(0).(func(*entities.Manufacturer) *entities.Manufacturer); ok {
		r0 = rf(e)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Manufacturer)
		}
	}

	if rf, ok := ret.Get(1).(func(*entities.Manufacturer) error); ok {
		r1 = rf(e)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Usecase_UpdateManufacturer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateManufacturer'
type Usecase_UpdateManufacturer_Call struct {
	*mock.Call
}

// UpdateManufacturer is a helper method to define mock.On call
//   - e *entities.Manufacturer
func (_e *Usecase_Expecter) UpdateManufacturer(e interface{}) *Usecase_UpdateManufacturer_Call {
	return &Usecase_UpdateManufacturer_Call{Call: _e.mock.On("UpdateManufacturer", e)}
}

func (_c *Usecase_UpdateManufacturer_Call) Run(run func(e *entities.Manufacturer)) *Usecase_UpdateManufacturer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entities.Manufacturer))
	})
	return _c
}

func (_c *Usecase_UpdateManufacturer_Call) Return(_a0 *entities.Manufacturer, _a1 error) *Usecase_UpdateManufacturer_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Usecase_UpdateManufacturer_Call) RunAndReturn(run func(*entities.Manufacturer) (*entities.Manufacturer, error)) *Usecase_UpdateManufacturer_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateProduct provides a mock function with given fields: e
func (_m *Usecase) UpdateProduct(e *entities.Product) (*entities.Product, error) {
	ret := _m.Called(e)

	if len(ret) == 0 {
		panic("no return value specified for UpdateProduct")
	}

	var r0 *entities.Product
	var r1 error
	if rf, ok := ret.Get(0).(func(*entities.Product) (*entities.Product, error)); ok {
		return rf(e)
	}
	if rf, ok := ret.Get(0).(func(*entities.Product) *entities.Product); ok {
		r0 = rf(e)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Product)
		}
	}

	if rf, ok := ret.Get(1).(func(*entities.Product) error); ok {
		r1 = rf(e)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Usecase_UpdateProduct_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateProduct'
type Usecase_UpdateProduct_Call struct {
	*mock.Call
}

// UpdateProduct is a helper method to define mock.On call
//   - e *entities.Product
func (_e *Usecase_Expecter) UpdateProduct(e interface{}) *Usecase_UpdateProduct_Call {
	return &Usecase_UpdateProduct_Call{Call: _e.mock.On("UpdateProduct", e)}
}

func (_c *Usecase_UpdateProduct_Call) Run(run func(e *entities.Product)) *Usecase_UpdateProduct_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entities.Product))
	})
	return _c
}

func (_c *Usecase_UpdateProduct_Call) Return(_a0 *entities.Product, _a1 error) *Usecase_UpdateProduct_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Usecase_UpdateProduct_Call) RunAndReturn(run func(*entities.Product) (*entities.Product, error)) *Usecase_UpdateProduct_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateProductImage provides a mock function with given fields: productID, imageID, order
func (_m *Usecase) UpdateProductImage(productID entities.ID, imageID entities.ID, order int) ([]*entities.Image, error) {
	ret := _m.Called(productID, imageID, order)

	if len(ret) == 0 {
		panic("no return value specified for UpdateProductImage")
	}

	var r0 []*entities.Image
	var r1 error
	if rf, ok := ret.Get(0).(func(entities.ID, entities.ID, int) ([]*entities.Image, error)); ok {
		return rf(productID, imageID, order)
	}
	if rf, ok := ret.Get(0).(func(entities.ID, entities.ID, int) []*entities.Image); ok {
		r0 = rf(productID, imageID, order)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.Image)
		}
	}

	if rf, ok := ret.Get(1).(func(entities.ID, entities.ID, int) error); ok {
		r1 = rf(productID, imageID, order)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Usecase_UpdateProductImage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateProductImage'
type Usecase_UpdateProductImage_Call struct {
	*mock.Call
}

// UpdateProductImage is a helper method to define mock.On call
//   - productID entities.ID
//   - imageID entities.ID
//   - order int
func (_e *Usecase_Expecter) UpdateProductImage(productID interface{}, imageID interface{}, order interface{}) *Usecase_UpdateProductImage_Call {
	return &Usecase_UpdateProductImage_Call{Call: _e.mock.On("UpdateProductImage", productID, imageID, order)}
}

func (_c *Usecase_UpdateProductImage_Call) Run(run func(productID entities.ID, imageID entities.ID, order int)) *Usecase_UpdateProductImage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(entities.ID), args[1].(entities.ID), args[2].(int))
	})
	return _c
}

func (_c *Usecase_UpdateProductImage_Call) Return(_a0 []*entities.Image, _a1 error) *Usecase_UpdateProductImage_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Usecase_UpdateProductImage_Call) RunAndReturn(run func(entities.ID, entities.ID, int) ([]*entities.Image, error)) *Usecase_UpdateProductImage_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateService provides a mock function with given fields: e
func (_m *Usecase) UpdateService(e *entities.Service) (*entities.Service, error) {
	ret := _m.Called(e)

	if len(ret) == 0 {
		panic("no return value specified for UpdateService")
	}

	var r0 *entities.Service
	var r1 error
	if rf, ok := ret.Get(0).(func(*entities.Service) (*entities.Service, error)); ok {
		return rf(e)
	}
	if rf, ok := ret.Get(0).(func(*entities.Service) *entities.Service); ok {
		r0 = rf(e)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Service)
		}
	}

	if rf, ok := ret.Get(1).(func(*entities.Service) error); ok {
		r1 = rf(e)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Usecase_UpdateService_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateService'
type Usecase_UpdateService_Call struct {
	*mock.Call
}

// UpdateService is a helper method to define mock.On call
//   - e *entities.Service
func (_e *Usecase_Expecter) UpdateService(e interface{}) *Usecase_UpdateService_Call {
	return &Usecase_UpdateService_Call{Call: _e.mock.On("UpdateService", e)}
}

func (_c *Usecase_UpdateService_Call) Run(run func(e *entities.Service)) *Usecase_UpdateService_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entities.Service))
	})
	return _c
}

func (_c *Usecase_UpdateService_Call) Return(_a0 *entities.Service, _a1 error) *Usecase_UpdateService_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Usecase_UpdateService_Call) RunAndReturn(run func(*entities.Service) (*entities.Service, error)) *Usecase_UpdateService_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateServiceCategory provides a mock function with given fields: e
func (_m *Usecase) UpdateServiceCategory(e *entities.ServiceCategory) (*entities.ServiceCategory, error) {
	ret := _m.Called(e)

	if len(ret) == 0 {
		panic("no return value specified for UpdateServiceCategory")
	}

	var r0 *entities.ServiceCategory
	var r1 error
	if rf, ok := ret.Get(0).(func(*entities.ServiceCategory) (*entities.ServiceCategory, error)); ok {
		return rf(e)
	}
	if rf, ok := ret.Get(0).(func(*entities.ServiceCategory) *entities.ServiceCategory); ok {
		r0 = rf(e)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.ServiceCategory)
		}
	}

	if rf, ok := ret.Get(1).(func(*entities.ServiceCategory) error); ok {
		r1 = rf(e)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Usecase_UpdateServiceCategory_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateServiceCategory'
type Usecase_UpdateServiceCategory_Call struct {
	*mock.Call
}

// UpdateServiceCategory is a helper method to define mock.On call
//   - e *entities.ServiceCategory
func (_e *Usecase_Expecter) UpdateServiceCategory(e interface{}) *Usecase_UpdateServiceCategory_Call {
	return &Usecase_UpdateServiceCategory_Call{Call: _e.mock.On("UpdateServiceCategory", e)}
}

func (_c *Usecase_UpdateServiceCategory_Call) Run(run func(e *entities.ServiceCategory)) *Usecase_UpdateServiceCategory_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entities.ServiceCategory))
	})
	return _c
}

func (_c *Usecase_UpdateServiceCategory_Call) Return(_a0 *entities.ServiceCategory, _a1 error) *Usecase_UpdateServiceCategory_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Usecase_UpdateServiceCategory_Call) RunAndReturn(run func(*entities.ServiceCategory) (*entities.ServiceCategory, error)) *Usecase_UpdateServiceCategory_Call {
	_c.Call.Return(run)
	return _c
}

// UpsertCategoryImage provides a mock function with given fields: categoryID, imageName, imageContent, imageConfigs
func (_m *Usecase) UpsertCategoryImage(categoryID entities.ID, imageName string, imageContent []byte, imageConfigs map[string]imageproxy.ImageConfig) (*entities.Category, error) {
	ret := _m.Called(categoryID, imageName, imageContent, imageConfigs)

	if len(ret) == 0 {
		panic("no return value specified for UpsertCategoryImage")
	}

	var r0 *entities.Category
	var r1 error
	if rf, ok := ret.Get(0).(func(entities.ID, string, []byte, map[string]imageproxy.ImageConfig) (*entities.Category, error)); ok {
		return rf(categoryID, imageName, imageContent, imageConfigs)
	}
	if rf, ok := ret.Get(0).(func(entities.ID, string, []byte, map[string]imageproxy.ImageConfig) *entities.Category); ok {
		r0 = rf(categoryID, imageName, imageContent, imageConfigs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Category)
		}
	}

	if rf, ok := ret.Get(1).(func(entities.ID, string, []byte, map[string]imageproxy.ImageConfig) error); ok {
		r1 = rf(categoryID, imageName, imageContent, imageConfigs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Usecase_UpsertCategoryImage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpsertCategoryImage'
type Usecase_UpsertCategoryImage_Call struct {
	*mock.Call
}

// UpsertCategoryImage is a helper method to define mock.On call
//   - categoryID entities.ID
//   - imageName string
//   - imageContent []byte
//   - imageConfigs map[string]imageproxy.ImageConfig
func (_e *Usecase_Expecter) UpsertCategoryImage(categoryID interface{}, imageName interface{}, imageContent interface{}, imageConfigs interface{}) *Usecase_UpsertCategoryImage_Call {
	return &Usecase_UpsertCategoryImage_Call{Call: _e.mock.On("UpsertCategoryImage", categoryID, imageName, imageContent, imageConfigs)}
}

func (_c *Usecase_UpsertCategoryImage_Call) Run(run func(categoryID entities.ID, imageName string, imageContent []byte, imageConfigs map[string]imageproxy.ImageConfig)) *Usecase_UpsertCategoryImage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(entities.ID), args[1].(string), args[2].([]byte), args[3].(map[string]imageproxy.ImageConfig))
	})
	return _c
}

func (_c *Usecase_UpsertCategoryImage_Call) Return(_a0 *entities.Category, _a1 error) *Usecase_UpsertCategoryImage_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Usecase_UpsertCategoryImage_Call) RunAndReturn(run func(entities.ID, string, []byte, map[string]imageproxy.ImageConfig) (*entities.Category, error)) *Usecase_UpsertCategoryImage_Call {
	_c.Call.Return(run)
	return _c
}

// UpsertManufacturerImage provides a mock function with given fields: manufacturerID, imageName, imageContent, imageConfigs
func (_m *Usecase) UpsertManufacturerImage(manufacturerID entities.ID, imageName string, imageContent []byte, imageConfigs map[string]imageproxy.ImageConfig) (*entities.Manufacturer, error) {
	ret := _m.Called(manufacturerID, imageName, imageContent, imageConfigs)

	if len(ret) == 0 {
		panic("no return value specified for UpsertManufacturerImage")
	}

	var r0 *entities.Manufacturer
	var r1 error
	if rf, ok := ret.Get(0).(func(entities.ID, string, []byte, map[string]imageproxy.ImageConfig) (*entities.Manufacturer, error)); ok {
		return rf(manufacturerID, imageName, imageContent, imageConfigs)
	}
	if rf, ok := ret.Get(0).(func(entities.ID, string, []byte, map[string]imageproxy.ImageConfig) *entities.Manufacturer); ok {
		r0 = rf(manufacturerID, imageName, imageContent, imageConfigs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Manufacturer)
		}
	}

	if rf, ok := ret.Get(1).(func(entities.ID, string, []byte, map[string]imageproxy.ImageConfig) error); ok {
		r1 = rf(manufacturerID, imageName, imageContent, imageConfigs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Usecase_UpsertManufacturerImage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpsertManufacturerImage'
type Usecase_UpsertManufacturerImage_Call struct {
	*mock.Call
}

// UpsertManufacturerImage is a helper method to define mock.On call
//   - manufacturerID entities.ID
//   - imageName string
//   - imageContent []byte
//   - imageConfigs map[string]imageproxy.ImageConfig
func (_e *Usecase_Expecter) UpsertManufacturerImage(manufacturerID interface{}, imageName interface{}, imageContent interface{}, imageConfigs interface{}) *Usecase_UpsertManufacturerImage_Call {
	return &Usecase_UpsertManufacturerImage_Call{Call: _e.mock.On("UpsertManufacturerImage", manufacturerID, imageName, imageContent, imageConfigs)}
}

func (_c *Usecase_UpsertManufacturerImage_Call) Run(run func(manufacturerID entities.ID, imageName string, imageContent []byte, imageConfigs map[string]imageproxy.ImageConfig)) *Usecase_UpsertManufacturerImage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(entities.ID), args[1].(string), args[2].([]byte), args[3].(map[string]imageproxy.ImageConfig))
	})
	return _c
}

func (_c *Usecase_UpsertManufacturerImage_Call) Return(_a0 *entities.Manufacturer, _a1 error) *Usecase_UpsertManufacturerImage_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Usecase_UpsertManufacturerImage_Call) RunAndReturn(run func(entities.ID, string, []byte, map[string]imageproxy.ImageConfig) (*entities.Manufacturer, error)) *Usecase_UpsertManufacturerImage_Call {
	_c.Call.Return(run)
	return _c
}

// NewUsecase creates a new instance of Usecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *Usecase {
	mock := &Usecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
