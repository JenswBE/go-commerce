// Code generated by mockery v2.12.1. DO NOT EDIT.

package mocks

import (
	entities "github.com/JenswBE/go-commerce/entities"
	mock "github.com/stretchr/testify/mock"

	testing "testing"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// Decode provides a mock function with given fields: input
func (_m *Service) Decode(input string) (entities.ID, error) {
	ret := _m.Called(input)

	var r0 entities.ID
	if rf, ok := ret.Get(0).(func(string) entities.ID); ok {
		r0 = rf(input)
	} else {
		r0 = ret.Get(0).(entities.ID)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Encode provides a mock function with given fields: input
func (_m *Service) Encode(input entities.ID) string {
	ret := _m.Called(input)

	var r0 string
	if rf, ok := ret.Get(0).(func(entities.ID) string); ok {
		r0 = rf(input)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// NewService creates a new instance of Service. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewService(t testing.TB) *Service {
	mock := &Service{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
