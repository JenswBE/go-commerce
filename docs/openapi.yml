openapi: "3.0.2"
info:
  title: GoCommerce
  version: "1.0"

servers:
  - description: Local
    url: /api

tags:
  # Products
  - name: categories
  - name: manufacturers
  - name: products

  # Content
  - name: content
  - name: events

paths:
  # ============================
  # =         PRODUCTS         =
  # ============================
  /categories/:
    get:
      operationId: list_categories
      description: List categories
      tags: ["categories"]
      parameters:
        - $ref: "#/components/parameters/queryImg"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CategoryList"
        "default":
          $ref: "#/components/responses/Error"

  /categories/{id}/:
    parameters:
      - $ref: "#/components/parameters/pathID"
    get:
      operationId: get_category
      description: Get category details
      tags: ["categories"]
      parameters:
        - $ref: "#/components/parameters/queryImg"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Category"
        "default":
          $ref: "#/components/responses/Error"

  /manufacturers/:
    get:
      operationId: list_manufacturers
      description: List manufacturers
      tags: ["manufacturers"]
      parameters:
        - $ref: "#/components/parameters/queryImg"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ManufacturerList"
        "default":
          $ref: "#/components/responses/Error"

  /manufacturers/{id}/:
    parameters:
      - $ref: "#/components/parameters/pathID"
    get:
      operationId: get_manufacturer
      description: Get manufacturer details
      tags: ["manufacturers"]
      parameters:
        - $ref: "#/components/parameters/queryImg"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Manufacturer"
        "default":
          $ref: "#/components/responses/Error"

  /products/:
    get:
      operationId: list_products
      description: List products
      tags: ["products"]
      parameters:
        - $ref: "#/components/parameters/queryImg"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductList"
        "default":
          $ref: "#/components/responses/Error"

  /products/{id}/:
    parameters:
      - $ref: "#/components/parameters/pathID"
    get:
      operationId: get_product
      description: Get product details
      tags: ["products"]
      parameters:
        - $ref: "#/components/parameters/queryImg"
        - $ref: "#/components/parameters/resolve"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResolvedProduct"
        "default":
          $ref: "#/components/responses/Error"

  # ============================
  # =         CONTENT          =
  # ============================
  /content/{content_name}/:
    parameters:
      - $ref: "#/components/parameters/pathContentName"
    get:
      operationId: get_content
      description: Get content
      tags: ["content"]
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Content"
        "default":
          $ref: "#/components/responses/Error"

  /events/:
    get:
      operationId: list_events
      description: List events
      tags: ["events"]
      parameters:
        - $ref: "#/components/parameters/queryIncludePastEvents"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EventList"
        "default":
          $ref: "#/components/responses/Error"

  /events/{id}/:
    parameters:
      - $ref: "#/components/parameters/pathID"
    get:
      operationId: get_event
      description: Get event details
      tags: ["events"]
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Event"
        "default":
          $ref: "#/components/responses/Error"

components:
  parameters:
    pathContentName:
      name: content_name
      in: path
      description: Content name
      required: true
      schema:
        type: string
        example: about

    pathID:
      name: id
      in: path
      description: ID
      required: true
      schema:
        $ref: "#/components/schemas/ShortID"

    queryImg:
      name: img
      in: query
      description: >-
        Comma separated list of ImageConfig.
        Check ImageConfig for exact format.
      schema:
        type: array
        items:
          $ref: "#/components/schemas/ImageConfig"
      explode: false

    queryIncludePastEvents:
      name: include_past_events
      in: query
      description: Include events which are already done (end time in the past).
      schema:
        type: boolean
        default: false

    resolve:
      name: resolve
      in: query
      description: The returned object should include related objects.
      schema:
        type: boolean
        default: false

  schemas:
    Category:
      allOf:
        - $ref: "#/components/schemas/Header"
        - type: object
          required:
            - name
            - order
          properties:
            name:
              type: string
              example: Makeup & Cosmetica
            description:
              type: string
            parent_id:
              $ref: "#/components/schemas/ShortID"
            order:
              description: Should be sorted ascending by this column
              type: integer
              format: int64
            product_ids:
              type: array
              items:
                type: string
                format: uuid
              readOnly: True
            image_urls:
              $ref: "#/components/schemas/ImageUrlMap"

    CategoryList:
      type: object
      required:
        - categories
      properties:
        categories:
          type: array
          items:
            $ref: "#/components/schemas/Category"

    Content:
      type: object
      required:
        - name
        - content_type
        - body
      properties:
        name:
          type: string
          example: about
          readOnly: true
        content_type:
          $ref: "#/components/schemas/ContentType"
        body:
          type: string
          example: This is something about me.

    ContentType:
      type: string
      enum:
        - SIMPLE
        - HTML
      readOnly: true

    ContentList:
      type: object
      required:
        - content
      properties:
        content:
          type: array
          items:
            $ref: "#/components/schemas/Content"

    Event:
      required:
        - name
        - event_type
        - start
        - end
      allOf:
        - $ref: "#/components/schemas/Header"
        - type: object
          properties:
            name:
              type: string
              example: Winter sale
            description:
              type: string
              example: Extended shopping during this winter day!
            event_type:
              type: string
              description: Type of event. Types should be defined in GoCommerce config file.
              example: sale
            start:
              type: string
              format: date-time
              description: Start of the event. In case "whole_day" is true, only the date part is considered.
            end:
              type: string
              format: date-time
              description: End of the event, could be same as start. In case "whole_day" is true, only the date part is considered.
            whole_day:
              type: boolean

    EventList:
      type: object
      required:
        - events
      properties:
        events:
          type: array
          items:
            $ref: "#/components/schemas/Event"

    GocomError:
      type: object
      required:
        - code
        - message
      properties:
        status:
          description: HTTP status code
          type: integer
          example: 400
        code:
          $ref: "#/components/schemas/GocomErrorCode"
        message:
          description: Human-readable description of the error
          type: string
          example: Provided authentication token is invalid
        instance:
          description: Object to which this error is related
          type: string
          example: ""

    GocomErrorCode:
      description: |
        - CATEGORY_NAME_EMPTY: Category name is required and cannot be empty
        - CATEGORY_ORDER_NEGATIVE: Category order should be a positive integer
        - CONTENT_NAME_EMPTY: Content name is required and cannot be empty
        - CONTENT_TYPE_INVALID: Content type is empty or has an invalid value
        - EVENT_END_BEFORE_START: The end date of the event should be equal to or after the start date
        - IMAGE_ORDER_NEGATIVE: Image order should be a positive integer
        - INVALID_ID: Provided short ID or UUID is invalid
        - PARAMETER_MISSING: A required URL parameter is missing
        - PRODUCT_NAME_EMPTY: Product name is required and cannot be empty
        - PRODUCT_PRICE_NEGATIVE: Product price should be a positive integer
        - UNKNOWN_CATEGORY: The category does not exist
        - UNKNOWN_CONTENT: The content does not exist
        - UNKNOWN_ERROR: An unknown error occurred
        - UNKNOWN_EVENT: The event does not exist
        - UNKNOWN_IMAGE: The image does not exist
        - UNKNOWN_MANUFACTURER: The manufacturer does not exist
        - UNKNOWN_PRODUCT: The product does not exist
      type: string
      example: INVALID_ID
      enum:
        - CATEGORY_NAME_EMPTY
        - CATEGORY_ORDER_NEGATIVE
        - CONTENT_NAME_EMPTY
        - CONTENT_TYPE_INVALID
        - EVENT_END_BEFORE_START
        - IMAGE_ORDER_NEGATIVE
        - INVALID_ID
        - PARAMETER_MISSING
        - PRODUCT_NAME_EMPTY
        - PRODUCT_PRICE_NEGATIVE
        - UNKNOWN_CATEGORY
        - UNKNOWN_CONTENT
        - UNKNOWN_ERROR
        - UNKNOWN_EVENT
        - UNKNOWN_IMAGE
        - UNKNOWN_MANUFACTURER
        - UNKNOWN_PRODUCT

    Header:
      type: object
      properties:
        id:
          type: string
          description: Compressed representation of ID
          example: "AneTxNh7GB5uD2HoXvwF2E"
          readOnly: True

    HeaderTimestamped:
      allOf:
        - $ref: "#/components/schemas/Header"
        - type: object
          properties:
            created_at:
              type: string
              format: date-time
              example: "2020-12-23T10:00:00Z"
              readOnly: True
            updated_at:
              type: string
              format: date-time
              example: "2020-12-24T11:30:00Z"
              readOnly: True

    Image:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        ext:
          type: string
          description: Extension of the image
          example: png
          readOnly: true
        urls:
          $ref: "#/components/schemas/ImageUrlMap"
        order:
          description: Should be sorted ascending by this column
          type: integer
          format: int64
      required:
        - id
        - ext
        - urls
        - order

    ImageConfig:
      type: string
      example: 300_200_FIT
      description: |-
        Comma separated list of image configs in format width_height_resizeMode.
        - Width: Width of the image
        - Height: Height of the image (optional, default = Width)
        - Resize mode (optional, default = FIT):
          - FIT:  Fits the image within the dimensions. Resulting image
                  might be smaller than dimensions.
          - FILL: Fill the dimensions with the image. Image might be cropped.

    ImageUrl:
      type: string
      description: Signed URL pointing to the image
      example: "https://images.jensw.be/.../fill/300/200/.../anBn.png"
      readOnly: true

    ImageUrlMap:
      type: object
      additionalProperties:
        $ref: "#/components/schemas/ImageUrl"
      example:
        300_200_FIT: "https://images.jensw.be/.../fill/300/200/.../anBn.png"
      readOnly: true

    Manufacturer:
      required:
        - name
      allOf:
        - $ref: "#/components/schemas/Header"
        - type: object
          properties:
            name:
              type: string
              example: Bjoetiek Y
            website_url:
              type: string
              format: url
              example: https://bjoetiek-y.be
            image_urls:
              $ref: "#/components/schemas/ImageUrlMap"

    ManufacturerList:
      type: object
      required:
        - manufacturers
      properties:
        manufacturers:
          type: array
          items:
            $ref: "#/components/schemas/Manufacturer"

    Product:
      allOf:
        - $ref: "#/components/schemas/HeaderTimestamped"
        - type: object
          properties:
            name:
              type: string
              example: Gezichtsmasker
            description_short:
              type: string
            description_long:
              type: string
            price:
              description: Price in cents
              type: integer
              format: int64
              example: 1500
            category_ids:
              type: array
              items:
                type: string
                format: uuid
            manufacturer_id:
              type: string
              format: uuid
            status:
              $ref: "#/components/schemas/ProductStatus"
            stock_count:
              type: integer
              format: int64
            image_urls:
              type: array
              items:
                $ref: "#/components/schemas/ImageUrlMap"
              readOnly: true
          required:
            - name
            - price

    ProductStatus:
      type: string
      enum:
        - AVAILABLE
        - ARCHIVED

    ResolvedProduct:
      allOf:
        - $ref: "#/components/schemas/Product"
        - type: object
          properties:
            manufacturer:
              $ref: "#/components/schemas/Manufacturer"
            categories:
              type: array
              items:
                $ref: "#/components/schemas/Category"

    ProductList:
      type: object
      required:
        - products
      properties:
        products:
          type: array
          items:
            $ref: "#/components/schemas/Product"

    ShortID:
      type: string
      description: Compressed representation of ID
      example: "AneTxNh7GB5uD2HoXvwF2E"

  responses:
    Error:
      description: Default error response
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/GocomError"
