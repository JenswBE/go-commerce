openapi: "3.0.2"
info:
  title: GoCommerce
  version: "1.0"

servers:
  - description: Local
    url: /api

tags:
  # Config
  - name: config

  # Products
  - name: categories
  - name: manufacturers
  - name: products

  # Content
  - name: content
  - name: events

paths:
  # ============================
  # =          CONFIG          =
  # ============================
  /config/:
    get:
      operationId: get_config
      description: Get configuration
      tags: ["config"]
      security: []
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Config"

  # ============================
  # =         PRODUCTS         =
  # ============================
  /categories/:
    get:
      operationId: list_categories
      description: List categories
      tags: ["categories"]
      security: []
      parameters:
        - $ref: "#/components/parameters/queryImg"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CategoryList"
        "default":
          $ref: "#/components/responses/Error"
    post:
      operationId: add_category
      description: Add category
      tags: ["categories"]
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Category"
        required: true
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Category"
        "default":
          $ref: "#/components/responses/Error"

  /categories/{id}/:
    parameters:
      - $ref: "#/components/parameters/pathID"
    get:
      operationId: get_category
      description: Get category details
      tags: ["categories"]
      security: []
      parameters:
        - $ref: "#/components/parameters/queryImg"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Category"
        "default":
          $ref: "#/components/responses/Error"
    put:
      operationId: update_category
      description: Update category
      tags: ["categories"]
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Category"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Category"
        "default":
          $ref: "#/components/responses/Error"
    delete:
      operationId: delete_category
      description: Delete category
      tags: ["categories"]
      responses:
        "204":
          description: No Content
        "default":
          $ref: "#/components/responses/Error"

  /categories/{id}/image/:
    parameters:
      - $ref: "#/components/parameters/pathID"
    put:
      operationId: upsert_category_image
      description: Upsert image
      tags: ["categories"]
      parameters:
        - $ref: "#/components/parameters/queryImg"
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/FileBodySingle"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Image"
        "default":
          $ref: "#/components/responses/Error"
    delete:
      operationId: delete_category_image
      description: Delete image
      tags: ["categories"]
      responses:
        "204":
          description: No Content
        "default":
          $ref: "#/components/responses/Error"

  /manufacturers/:
    get:
      operationId: list_manufacturers
      description: List manufacturers
      tags: ["manufacturers"]
      security: []
      parameters:
        - $ref: "#/components/parameters/queryImg"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ManufacturerList"
        "default":
          $ref: "#/components/responses/Error"
    post:
      operationId: add_manufacturer
      description: Add manufacturer
      tags: ["manufacturers"]
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Manufacturer"
        required: true
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Manufacturer"
        "default":
          $ref: "#/components/responses/Error"

  /manufacturers/{id}/:
    parameters:
      - $ref: "#/components/parameters/pathID"
    get:
      operationId: get_manufacturer
      description: Get manufacturer details
      tags: ["manufacturers"]
      security: []
      parameters:
        - $ref: "#/components/parameters/queryImg"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Manufacturer"
        "default":
          $ref: "#/components/responses/Error"
    put:
      operationId: update_manufacturer
      description: Update manufacturer
      tags: ["manufacturers"]
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Manufacturer"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Manufacturer"
        "default":
          $ref: "#/components/responses/Error"
    delete:
      operationId: delete_manufacturer
      description: Delete manufacturer
      tags: ["manufacturers"]
      responses:
        "204":
          description: No Content
        "default":
          $ref: "#/components/responses/Error"

  /manufacturers/{id}/image/:
    parameters:
      - $ref: "#/components/parameters/pathID"
    put:
      operationId: upsert_manufacturer_image
      description: Upsert image
      tags: ["manufacturers"]
      parameters:
        - $ref: "#/components/parameters/queryImg"
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/FileBodySingle"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Image"
        "default":
          $ref: "#/components/responses/Error"
    delete:
      operationId: delete_manufacturer_image
      description: Delete image
      tags: ["manufacturers"]
      responses:
        "204":
          description: No Content
        "default":
          $ref: "#/components/responses/Error"

  /products/:
    get:
      operationId: list_products
      description: List products
      tags: ["products"]
      security: []
      parameters:
        - $ref: "#/components/parameters/queryImg"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductList"
        "default":
          $ref: "#/components/responses/Error"
    post:
      operationId: add_product
      description: Add product
      tags: ["products"]
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Product"
        required: true
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
        "default":
          $ref: "#/components/responses/Error"

  /products/{id}/:
    parameters:
      - $ref: "#/components/parameters/pathID"
    get:
      operationId: get_product
      description: Get product details
      tags: ["products"]
      security: []
      parameters:
        - $ref: "#/components/parameters/queryImg"
        - $ref: "#/components/parameters/resolve"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResolvedProduct"
        "default":
          $ref: "#/components/responses/Error"
    put:
      operationId: update_product
      description: Update product
      tags: ["products"]
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Product"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
        "default":
          $ref: "#/components/responses/Error"
    delete:
      operationId: delete_product
      description: Delete product
      tags: ["products"]
      responses:
        "204":
          description: No Content
        "default":
          $ref: "#/components/responses/Error"

  /products/{id}/images/:
    parameters:
      - $ref: "#/components/parameters/pathID"
      - $ref: "#/components/parameters/queryImg"
    get:
      operationId: list_product_images
      description: Get product images
      tags: ["products"]
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ImageList"
        "default":
          $ref: "#/components/responses/Error"
    post:
      operationId: add_product_images
      description: Add product images
      tags: ["products"]
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/FileBodyMultiple"
        required: true
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ImageList"
        "default":
          $ref: "#/components/responses/Error"

  /products/{id}/images/{image_id}/:
    parameters:
      - $ref: "#/components/parameters/pathID"
      - $ref: "#/components/parameters/pathImageID"
    put:
      operationId: update_product_image
      description: >-
        Update product image.
        In case the new order matches another image, the orders are swapped.
        Therefore, this call will return all impacted images (1 or 2).
        First the image on which the request was called and optionally second the swapped image.
      tags: ["products"]
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Image"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ImageList"
        "default":
          $ref: "#/components/responses/Error"
    delete:
      operationId: delete_product_image
      description: Delete product image
      tags: ["products"]
      responses:
        "204":
          description: No Content
        "default":
          $ref: "#/components/responses/Error"

  # ============================
  # =         CONTENT          =
  # ============================
  /content/:
    get:
      operationId: list_content
      description: List content
      tags: ["content"]
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ContentList"
        "default":
          $ref: "#/components/responses/Error"

  /content/{content_name}/:
    parameters:
      - $ref: "#/components/parameters/pathContentName"
    get:
      operationId: get_content
      description: Get content
      tags: ["content"]
      security: []
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Content"
        "default":
          $ref: "#/components/responses/Error"
    put:
      operationId: update_content
      description: Update content
      tags: ["content"]
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Content"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Content"
        "default":
          $ref: "#/components/responses/Error"

  /events/:
    get:
      operationId: list_events
      description: List events
      tags: ["events"]
      security: []
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EventList"
        "default":
          $ref: "#/components/responses/Error"
    post:
      operationId: add_event
      description: Add event
      tags: ["events"]
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Event"
        required: true
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Event"
        "default":
          $ref: "#/components/responses/Error"

  /events/{id}/:
    parameters:
      - $ref: "#/components/parameters/pathID"
    get:
      operationId: get_event
      description: Get event details
      tags: ["events"]
      security: []
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Event"
        "default":
          $ref: "#/components/responses/Error"
    put:
      operationId: update_event
      description: Update event
      tags: ["events"]
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Event"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Event"
        "default":
          $ref: "#/components/responses/Error"
    delete:
      operationId: delete_event
      description: Delete event
      tags: ["events"]
      responses:
        "204":
          description: No Content
        "default":
          $ref: "#/components/responses/Error"

components:
  parameters:
    pathContentName:
      name: content_name
      in: path
      description: Content name
      required: true
      schema:
        type: string
        example: about

    pathID:
      name: id
      in: path
      description: ID
      required: true
      schema:
        $ref: "#/components/schemas/ShortID"

    pathImageID:
      name: image_id
      in: path
      description: Image ID
      required: true
      schema:
        $ref: "#/components/schemas/ShortID"

    queryImg:
      name: img
      in: query
      description: >-
        Comma separated list of ImageConfig.
        Check ImageConfig for exact format.
      required: false
      schema:
        type: array
        items:
          $ref: "#/components/schemas/ImageConfig"
      explode: false

    resolve:
      name: resolve
      in: query
      description: The returned object should include related objects.
      schema:
        type: boolean
        default: false

  schemas:
    Config:
      type: object
      required:
        - features
      properties:
        features:
          $ref: "#/components/schemas/ConfigFeatures"

    ConfigFeatures:
      type: object
      required:
        - categories
        - manufacturers
        - products
        - content
        - events
      properties:
        categories:
          $ref: "#/components/schemas/ConfigFeaturesCategories"
        manufacturers:
          $ref: "#/components/schemas/ConfigFeaturesManufacturers"
        products:
          $ref: "#/components/schemas/ConfigFeaturesProducts"
        content:
          $ref: "#/components/schemas/ConfigFeaturesContent"
        events:
          $ref: "#/components/schemas/ConfigFeaturesEvents"

    ConfigFeaturesCategories:
      type: object
      required:
        - enabled
      properties:
        enabled:
          type: boolean

    ConfigFeaturesManufacturers:
      type: object
      required:
        - enabled
      properties:
        enabled:
          type: boolean

    ConfigFeaturesProducts:
      type: object
      required:
        - enabled
      properties:
        enabled:
          type: boolean

    ConfigFeaturesContent:
      type: object
      required:
        - enabled
      properties:
        enabled:
          type: boolean
        # content list should be fetched from `GET /content/` instead.

    ConfigFeaturesEvents:
      type: object
      required:
        - enabled
        - whole_days_only
      properties:
        enabled:
          type: boolean
        whole_days_only:
          type: boolean

    Category:
      allOf:
        - $ref: "#/components/schemas/Header"
        - type: object
          required:
            - name
            - order
          properties:
            name:
              type: string
              example: Makeup & Cosmetica
            description:
              type: string
            parent_id:
              $ref: "#/components/schemas/ShortID"
            order:
              description: Should be sorted ascending by this column
              type: integer
              format: int64
            product_ids:
              type: array
              items:
                type: string
                format: uuid
              readOnly: True
            image_urls:
              $ref: "#/components/schemas/ImageUrlMap"

    CategoryList:
      type: object
      required:
        - categories
      properties:
        categories:
          type: array
          items:
            $ref: "#/components/schemas/Category"

    Content:
      type: object
      required:
        - name
        - content_type
        - body
      properties:
        name:
          type: string
          example: about
          readOnly: true
        content_type:
          $ref: "#/components/schemas/ContentType"
        body:
          type: string
          example: This is something about me.

    ContentType:
      type: string
      enum:
        - SIMPLE
        - HTML
      readOnly: true

    ContentList:
      type: object
      required:
        - content
      properties:
        content:
          type: array
          items:
            $ref: "#/components/schemas/Content"

    Event:
      required:
        - name
        - event_type
        - start
        - end
      allOf:
        - $ref: "#/components/schemas/Header"
        - type: object
          properties:
            name:
              type: string
              example: Winter sale
            description:
              type: string
              example: Extended shopping during this winter day!
            event_type:
              type: string
              description: Type of event. Types should be defined in GoCommerce config file.
              example: sale
            start:
              type: string
              format: date-time
              description: Start of the event. In case "whole_day" is true, only the date part is considered.
            end:
              type: string
              format: date-time
              description: End of the event, could be same as start. In case "whole_day" is true, only the date part is considered.
            whole_day:
              type: boolean

    EventList:
      type: object
      required:
        - events
      properties:
        events:
          type: array
          items:
            $ref: "#/components/schemas/Event"

    FileBodySingle:
      type: object
      required:
        - file
      properties:
        file:
          $ref: "#/components/schemas/File"

    FileBodyMultiple:
      type: object
      required:
        - file
      properties:
        file:
          type: array
          items:
            $ref: "#/components/schemas/File"

    File:
      type: string
      format: binary

    GocomError:
      type: object
      required:
        - code
        - message
      properties:
        status:
          description: HTTP status code
          type: integer
          example: 400
        code:
          $ref: "#/components/schemas/GocomErrorCode"
        message:
          description: Human-readable description of the error
          type: string
          example: Provided authentication token is invalid
        instance:
          description: Object to which this error is related
          type: string
          example: ""

    GocomErrorCode:
      description: |
        - CATEGORY_NAME_EMPTY: Category name is required and cannot be empty
        - CATEGORY_ORDER_NEGATIVE: Category order should be a positive integer
        - CATEGORY_PARENT_ID_INVALID: Parent ID of the category is invalid
        - CONTENT_NAME_EMPTY: Content name is required and cannot be empty
        - CONTENT_TYPE_INVALID: Content type is empty or has an invalid value
        - EVENT_END_BEFORE_START: The end date of the event should be equal to or after the start date
        - IMAGE_ORDER_NEGATIVE: Image order should be a positive integer
        - INVALID_AUTH_TOKEN: Provided authentication token is invalid
        - INVALID_ID: Provided short ID or UUID is invalid
        - MISSING_ADMIN_ROLE: Required role "admin" is missing on provided authentication token
        - PARAMETER_MISSING: A required URL parameter is missing
        - PRODUCT_CATEGORY_IDS_INVALID: Category ID's of product are invalid
        - PRODUCT_MANUFACTURER_ID_INVALID: Manufacturer ID of the product is invalid
        - PRODUCT_NAME_EMPTY: Product name is required and cannot be empty
        - PRODUCT_PRICE_NEGATIVE: Product price should be a positive integer
        - SINGLE_IMAGE_IN_FORM: Exactly one image is expected in multipart form, but none or multiple are provided
        - UNKNOWN_CATEGORY: The category does not exist
        - UNKNOWN_CONTENT: The content does not exist
        - UNKNOWN_ERROR: An unknown error occurred
        - UNKNOWN_EVENT: The event does not exist
        - UNKNOWN_IMAGE: The image does not exist
        - UNKNOWN_MANUFACTURER: The manufacturer does not exist
        - UNKNOWN_PRODUCT: The product does not exist
      type: string
      example: INVALID_AUTH_TOKEN
      enum:
        - CATEGORY_NAME_EMPTY
        - CATEGORY_ORDER_NEGATIVE
        - CATEGORY_PARENT_ID_INVALID
        - CONTENT_NAME_EMPTY
        - CONTENT_TYPE_INVALID
        - EVENT_END_BEFORE_START
        - IMAGE_ORDER_NEGATIVE
        - INVALID_AUTH_TOKEN
        - INVALID_ID
        - MISSING_ADMIN_ROLE
        - PARAMETER_MISSING
        - PRODUCT_CATEGORY_IDS_INVALID
        - PRODUCT_MANUFACTURER_ID_INVALID
        - PRODUCT_NAME_EMPTY
        - PRODUCT_PRICE_NEGATIVE
        - SINGLE_IMAGE_IN_FORM
        - UNKNOWN_CATEGORY
        - UNKNOWN_CONTENT
        - UNKNOWN_ERROR
        - UNKNOWN_EVENT
        - UNKNOWN_IMAGE
        - UNKNOWN_MANUFACTURER
        - UNKNOWN_PRODUCT

    Header:
      type: object
      properties:
        id:
          type: string
          description: Compressed representation of ID
          example: "AneTxNh7GB5uD2HoXvwF2E"
          readOnly: True

    HeaderTimestamped:
      allOf:
        - $ref: "#/components/schemas/Header"
        - type: object
          properties:
            created_at:
              type: string
              format: date-time
              example: "2020-12-23T10:00:00Z"
              readOnly: True
            updated_at:
              type: string
              format: date-time
              example: "2020-12-24T11:30:00Z"
              readOnly: True

    Image:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        ext:
          type: string
          description: Extension of the image
          example: png
          readOnly: true
        urls:
          $ref: "#/components/schemas/ImageUrlMap"
        order:
          description: Should be sorted ascending by this column
          type: integer
          format: int64
      required:
        - id
        - ext
        - urls
        - order

    ImageConfig:
      type: string
      example: 300_200_FIT
      description: |-
        Comma separated list of image configs in format width_height_resizeMode.
        - Width: Width of the image
        - Height: Height of the image (optional, default = Width)
        - Resize mode (optional, default = FIT):
          - FIT:  Fits the image within the dimensions. Resulting image
                  might be smaller than dimensions.
          - FILL: Fill the dimensions with the image. Image might be cropped.

    ImageUrl:
      type: string
      description: Signed URL pointing to the image
      example: "https://images.jensw.be/.../fill/300/200/.../anBn.png"
      readOnly: true

    ImageUrlMap:
      type: object
      additionalProperties:
        $ref: "#/components/schemas/ImageUrl"
      example:
        300_200_FIT: "https://images.jensw.be/.../fill/300/200/.../anBn.png"
      readOnly: true

    ImageList:
      type: object
      required:
        - images
      properties:
        images:
          type: array
          items:
            $ref: "#/components/schemas/Image"
      readOnly: true

    Manufacturer:
      required:
        - name
      allOf:
        - $ref: "#/components/schemas/Header"
        - type: object
          properties:
            name:
              type: string
              example: Bjoetiek Y
            website_url:
              type: string
              format: url
              example: https://bjoetiek-y.be
            image_urls:
              $ref: "#/components/schemas/ImageUrlMap"

    ManufacturerList:
      type: object
      required:
        - manufacturers
      properties:
        manufacturers:
          type: array
          items:
            $ref: "#/components/schemas/Manufacturer"

    Product:
      allOf:
        - $ref: "#/components/schemas/HeaderTimestamped"
        - type: object
          properties:
            name:
              type: string
              example: Gezichtsmasker
            description_short:
              type: string
            description_long:
              type: string
            price:
              description: Price in cents
              type: integer
              format: int64
              example: 1500
            category_ids:
              type: array
              items:
                type: string
                format: uuid
            manufacturer_id:
              type: string
              format: uuid
            status:
              $ref: "#/components/schemas/ProductStatus"
            stock_count:
              type: integer
              format: int64
            image_urls:
              type: array
              items:
                $ref: "#/components/schemas/ImageUrlMap"
              readOnly: true
          required:
            - name
            - price

    ProductStatus:
      type: string
      enum:
        - AVAILABLE
        - ARCHIVED

    ResolvedProduct:
      allOf:
        - $ref: "#/components/schemas/Product"
        - type: object
          properties:
            manufacturer:
              $ref: "#/components/schemas/Manufacturer"
            categories:
              type: array
              items:
                $ref: "#/components/schemas/Category"

    ProductList:
      type: object
      required:
        - products
      properties:
        products:
          type: array
          items:
            $ref: "#/components/schemas/Product"

    ShortID:
      type: string
      description: Compressed representation of ID
      example: "AneTxNh7GB5uD2HoXvwF2E"

  responses:
    Error:
      description: Default error response
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/GocomError"

  securitySchemes:
    localAuth:
      type: openIdConnect
      openIdConnectUrl: http://127.0.0.1:9001/auth/realms/go-commerce/.well-known/openid-configuration # See https://github.com/IBM/openapi-validator/issues/338

security:
  - localAuth: []
